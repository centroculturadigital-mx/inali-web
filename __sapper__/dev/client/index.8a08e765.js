import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, t as text, a as space, c as claim_element, b as children, f as claim_text, g as detach_dev, h as claim_space, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, n as noop, C as setContext, H as onMount, v as create_slot, w as get_slot_changes, x as get_slot_context, q as transition_in, r as transition_out, F as group_outros, G as check_outros, I as binding_callbacks, J as getContext, K as createEventDispatcher, p as mount_component, u as destroy_component, L as destroy_each } from './index.2c2b5d4b.js';
import { c as createCommonjsModule, u as unwrapExports } from './_commonjsHelpers.fffabd3b.js';

/* src/componentes/general/Lateral/Lateral.svelte generated by Svelte v3.12.1 */

const file = "src/componentes/general/Lateral/Lateral.svelte";

function create_fragment(ctx) {
	var aside, h2, t0, t1, ul2, li2, details2, summary0, t2, t3, ul1, h30, t4, t5, li1, details1, summary1, t6, t7, ul0, h31, t8, t9, li0, details0, summary2, t10;

	const block = {
		c: function create() {
			aside = element("aside");
			h2 = element("h2");
			t0 = text("Familia linguistica");
			t1 = space();
			ul2 = element("ul");
			li2 = element("li");
			details2 = element("details");
			summary0 = element("summary");
			t2 = text("Nombre de familia");
			t3 = space();
			ul1 = element("ul");
			h30 = element("h3");
			t4 = text("Agrupaciones linguisticas");
			t5 = space();
			li1 = element("li");
			details1 = element("details");
			summary1 = element("summary");
			t6 = text("Nombre de agrupacion linguistica");
			t7 = space();
			ul0 = element("ul");
			h31 = element("h3");
			t8 = text("Variantes");
			t9 = space();
			li0 = element("li");
			details0 = element("details");
			summary2 = element("summary");
			t10 = text("Nombre de variante");
			this.h();
		},

		l: function claim(nodes) {
			aside = claim_element(nodes, "ASIDE", { class: true }, false);
			var aside_nodes = children(aside);

			h2 = claim_element(aside_nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Familia linguistica");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(aside_nodes);

			ul2 = claim_element(aside_nodes, "UL", {}, false);
			var ul2_nodes = children(ul2);

			li2 = claim_element(ul2_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			details2 = claim_element(li2_nodes, "DETAILS", { class: true }, false);
			var details2_nodes = children(details2);

			summary0 = claim_element(details2_nodes, "SUMMARY", {}, false);
			var summary0_nodes = children(summary0);

			t2 = claim_text(summary0_nodes, "Nombre de familia");
			summary0_nodes.forEach(detach_dev);
			t3 = claim_space(details2_nodes);

			ul1 = claim_element(details2_nodes, "UL", {}, false);
			var ul1_nodes = children(ul1);

			h30 = claim_element(ul1_nodes, "H3", { class: true }, false);
			var h30_nodes = children(h30);

			t4 = claim_text(h30_nodes, "Agrupaciones linguisticas");
			h30_nodes.forEach(detach_dev);
			t5 = claim_space(ul1_nodes);

			li1 = claim_element(ul1_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			details1 = claim_element(li1_nodes, "DETAILS", { class: true }, false);
			var details1_nodes = children(details1);

			summary1 = claim_element(details1_nodes, "SUMMARY", {}, false);
			var summary1_nodes = children(summary1);

			t6 = claim_text(summary1_nodes, "Nombre de agrupacion linguistica");
			summary1_nodes.forEach(detach_dev);
			t7 = claim_space(details1_nodes);

			ul0 = claim_element(details1_nodes, "UL", {}, false);
			var ul0_nodes = children(ul0);

			h31 = claim_element(ul0_nodes, "H3", { class: true }, false);
			var h31_nodes = children(h31);

			t8 = claim_text(h31_nodes, "Variantes");
			h31_nodes.forEach(detach_dev);
			t9 = claim_space(ul0_nodes);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			details0 = claim_element(li0_nodes, "DETAILS", { class: true }, false);
			var details0_nodes = children(details0);

			summary2 = claim_element(details0_nodes, "SUMMARY", {}, false);
			var summary2_nodes = children(summary2);

			t10 = claim_text(summary2_nodes, "Nombre de variante");
			summary2_nodes.forEach(detach_dev);
			details0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			details1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			ul1_nodes.forEach(detach_dev);
			details2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul2_nodes.forEach(detach_dev);
			aside_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(h2, file, 12, 0, 149);
			add_location(summary0, file, 16, 12, 222);
			attr_dev(h30, "class", "Titulo svelte-1e8rsmb");
			add_location(h30, file, 21, 16, 323);
			add_location(summary1, file, 27, 24, 523);
			attr_dev(h31, "class", "Titulo svelte-1e8rsmb");
			add_location(h31, file, 32, 28, 711);
			add_location(summary2, file, 38, 36, 919);
			attr_dev(details0, "class", "svelte-1e8rsmb");
			add_location(details0, file, 37, 31, 873);
			add_location(li0, file, 36, 28, 837);
			add_location(ul0, file, 30, 24, 653);
			attr_dev(details1, "class", "svelte-1e8rsmb");
			add_location(details1, file, 26, 20, 465);
			add_location(li1, file, 25, 16, 440);
			add_location(ul1, file, 19, 12, 301);
			attr_dev(details2, "class", "svelte-1e8rsmb");
			add_location(details2, file, 15, 8, 200);
			add_location(li2, file, 14, 4, 187);
			add_location(ul2, file, 13, 0, 178);
			attr_dev(aside, "class", "svelte-1e8rsmb");
			add_location(aside, file, 11, 0, 141);
		},

		m: function mount(target, anchor) {
			insert_dev(target, aside, anchor);
			append_dev(aside, h2);
			append_dev(h2, t0);
			append_dev(aside, t1);
			append_dev(aside, ul2);
			append_dev(ul2, li2);
			append_dev(li2, details2);
			append_dev(details2, summary0);
			append_dev(summary0, t2);
			append_dev(details2, t3);
			append_dev(details2, ul1);
			append_dev(ul1, h30);
			append_dev(h30, t4);
			append_dev(ul1, t5);
			append_dev(ul1, li1);
			append_dev(li1, details1);
			append_dev(details1, summary1);
			append_dev(summary1, t6);
			append_dev(details1, t7);
			append_dev(details1, ul0);
			append_dev(ul0, h31);
			append_dev(h31, t8);
			append_dev(ul0, t9);
			append_dev(ul0, li0);
			append_dev(li0, details0);
			append_dev(details0, summary2);
			append_dev(summary2, t10);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(aside);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

class Lateral extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Lateral", options, id: create_fragment.name });
	}
}

/* src/componentes/general/Herramientas/Herramientas.svelte generated by Svelte v3.12.1 */

const file$1 = "src/componentes/general/Herramientas/Herramientas.svelte";

function create_fragment$1(ctx) {
	var header, button0, i0, t0, t1, button1, i1, t2;

	const block = {
		c: function create() {
			header = element("header");
			button0 = element("button");
			i0 = element("i");
			t0 = text("Riesgo");
			t1 = space();
			button1 = element("button");
			i1 = element("i");
			t2 = text("Voluta");
			this.h();
		},

		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", {}, false);
			var header_nodes = children(header);

			button0 = claim_element(header_nodes, "BUTTON", { class: true }, false);
			var button0_nodes = children(button0);

			i0 = claim_element(button0_nodes, "I", {}, false);
			var i0_nodes = children(i0);

			t0 = claim_text(i0_nodes, "Riesgo");
			i0_nodes.forEach(detach_dev);
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(header_nodes);

			button1 = claim_element(header_nodes, "BUTTON", { class: true }, false);
			var button1_nodes = children(button1);

			i1 = claim_element(button1_nodes, "I", {}, false);
			var i1_nodes = children(i1);

			t2 = claim_text(i1_nodes, "Voluta");
			i1_nodes.forEach(detach_dev);
			button1_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(i0, file$1, 24, 8, 425);
			attr_dev(button0, "class", "Riesgo svelte-bkiipb");
			add_location(button0, file$1, 23, 4, 393);
			add_location(i1, file$1, 27, 8, 489);
			attr_dev(button1, "class", "Voluta svelte-bkiipb");
			add_location(button1, file$1, 26, 4, 457);
			add_location(header, file$1, 22, 0, 380);
		},

		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, button0);
			append_dev(button0, i0);
			append_dev(i0, t0);
			append_dev(header, t1);
			append_dev(header, button1);
			append_dev(button1, i1);
			append_dev(i1, t2);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(header);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

class Herramientas extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$1, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Herramientas", options, id: create_fragment$1.name });
	}
}

const key = {};

/* src/componentes/general/Mapa/Mapa.svelte generated by Svelte v3.12.1 */

const file$2 = "src/componentes/general/Mapa/Mapa.svelte";

// (57:1) {#if map}
function create_if_block(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},

		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(57:1) {#if map}", ctx });
	return block;
}

function create_fragment$2(ctx) {
	var div, current;

	var if_block = (ctx.map) && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "svelte-1gsfua5");
			add_location(div, file$2, 55, 0, 997);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			ctx.div_binding(div);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.map) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block) if_block.d();
			ctx.div_binding(null);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$2.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	
		
	setContext(key, {
		getMap: () => map
	});

	let { lat, lon, zoom } = $$props;

	let map;
	let container;

	onMount(async () => {
		
		const mapboxModule = await import('./mapbox-gl.c6da7a07.js');

		const mapbox = mapboxModule.default;
		const link = document.createElement('link');
		link.rel = 'stylesheet';
		link.href = 'https://unpkg.com/mapbox-gl/dist/mapbox-gl.css';

		mapbox.accessToken = 'pk.eyJ1IjoicmFsZXhyZHoiLCJhIjoiY2lmdHB2aGo2MTZ4MnQ1bHkzeDJyaDMzNyJ9.UHhEm9gA1_uwAztXjb7iTQ';


		link.onload = () => {
			$$invalidate('map', map = new mapbox.Map({
				container,
				style: 'mapbox://styles/mapbox/satellite-v9',
				center: [lon, lat],
				// pitch: 60, 
				// bearing: -60,
				zoom
			}));
			
		};

		document.head.appendChild(link);

		return () => {
			map.remove();
			link.parentNode.removeChild(link);
		};
	});

	const writable_props = ['lat', 'lon', 'zoom'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Mapa> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('container', container = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('lat' in $$props) $$invalidate('lat', lat = $$props.lat);
		if ('lon' in $$props) $$invalidate('lon', lon = $$props.lon);
		if ('zoom' in $$props) $$invalidate('zoom', zoom = $$props.zoom);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { lat, lon, zoom, map, container };
	};

	$$self.$inject_state = $$props => {
		if ('lat' in $$props) $$invalidate('lat', lat = $$props.lat);
		if ('lon' in $$props) $$invalidate('lon', lon = $$props.lon);
		if ('zoom' in $$props) $$invalidate('zoom', zoom = $$props.zoom);
		if ('map' in $$props) $$invalidate('map', map = $$props.map);
		if ('container' in $$props) $$invalidate('container', container = $$props.container);
	};

	return {
		lat,
		lon,
		zoom,
		map,
		container,
		div_binding,
		$$slots,
		$$scope
	};
}

class Mapa extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment$2, safe_not_equal, ["lat", "lon", "zoom"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Mapa", options, id: create_fragment$2.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.lat === undefined && !('lat' in props)) {
			console.warn("<Mapa> was created without expected prop 'lat'");
		}
		if (ctx.lon === undefined && !('lon' in props)) {
			console.warn("<Mapa> was created without expected prop 'lon'");
		}
		if (ctx.zoom === undefined && !('zoom' in props)) {
			console.warn("<Mapa> was created without expected prop 'zoom'");
		}
	}

	get lat() {
		throw new Error("<Mapa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lat(value) {
		throw new Error("<Mapa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lon() {
		throw new Error("<Mapa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lon(value) {
		throw new Error("<Mapa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zoom() {
		throw new Error("<Mapa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zoom(value) {
		throw new Error("<Mapa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var helpers = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module helpers
 */
/**
 * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
 *
 * @memberof helpers
 * @type {number}
 */
exports.earthRadius = 6371008.8;
/**
 * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.
 *
 * @memberof helpers
 * @type {Object}
 */
exports.factors = {
    centimeters: exports.earthRadius * 100,
    centimetres: exports.earthRadius * 100,
    degrees: exports.earthRadius / 111325,
    feet: exports.earthRadius * 3.28084,
    inches: exports.earthRadius * 39.370,
    kilometers: exports.earthRadius / 1000,
    kilometres: exports.earthRadius / 1000,
    meters: exports.earthRadius,
    metres: exports.earthRadius,
    miles: exports.earthRadius / 1609.344,
    millimeters: exports.earthRadius * 1000,
    millimetres: exports.earthRadius * 1000,
    nauticalmiles: exports.earthRadius / 1852,
    radians: 1,
    yards: exports.earthRadius / 1.0936,
};
/**
 * Units of measurement factors based on 1 meter.
 *
 * @memberof helpers
 * @type {Object}
 */
exports.unitsFactors = {
    centimeters: 100,
    centimetres: 100,
    degrees: 1 / 111325,
    feet: 3.28084,
    inches: 39.370,
    kilometers: 1 / 1000,
    kilometres: 1 / 1000,
    meters: 1,
    metres: 1,
    miles: 1 / 1609.344,
    millimeters: 1000,
    millimetres: 1000,
    nauticalmiles: 1 / 1852,
    radians: 1 / exports.earthRadius,
    yards: 1 / 1.0936,
};
/**
 * Area of measurement factors based on 1 square meter.
 *
 * @memberof helpers
 * @type {Object}
 */
exports.areaFactors = {
    acres: 0.000247105,
    centimeters: 10000,
    centimetres: 10000,
    feet: 10.763910417,
    inches: 1550.003100006,
    kilometers: 0.000001,
    kilometres: 0.000001,
    meters: 1,
    metres: 1,
    miles: 3.86e-7,
    millimeters: 1000000,
    millimetres: 1000000,
    yards: 1.195990046,
};
/**
 * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
 *
 * @name feature
 * @param {Geometry} geometry input geometry
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature} a GeoJSON Feature
 * @example
 * var geometry = {
 *   "type": "Point",
 *   "coordinates": [110, 50]
 * };
 *
 * var feature = turf.feature(geometry);
 *
 * //=feature
 */
function feature(geom, properties, options) {
    if (options === void 0) { options = {}; }
    var feat = { type: "Feature" };
    if (options.id === 0 || options.id) {
        feat.id = options.id;
    }
    if (options.bbox) {
        feat.bbox = options.bbox;
    }
    feat.properties = properties || {};
    feat.geometry = geom;
    return feat;
}
exports.feature = feature;
/**
 * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.
 * For GeometryCollection type use `helpers.geometryCollection`
 *
 * @name geometry
 * @param {string} type Geometry Type
 * @param {Array<any>} coordinates Coordinates
 * @param {Object} [options={}] Optional Parameters
 * @returns {Geometry} a GeoJSON Geometry
 * @example
 * var type = "Point";
 * var coordinates = [110, 50];
 * var geometry = turf.geometry(type, coordinates);
 * // => geometry
 */
function geometry(type, coordinates, options) {
    switch (type) {
        case "Point": return point(coordinates).geometry;
        case "LineString": return lineString(coordinates).geometry;
        case "Polygon": return polygon(coordinates).geometry;
        case "MultiPoint": return multiPoint(coordinates).geometry;
        case "MultiLineString": return multiLineString(coordinates).geometry;
        case "MultiPolygon": return multiPolygon(coordinates).geometry;
        default: throw new Error(type + " is invalid");
    }
}
exports.geometry = geometry;
/**
 * Creates a {@link Point} {@link Feature} from a Position.
 *
 * @name point
 * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature<Point>} a Point feature
 * @example
 * var point = turf.point([-75.343, 39.984]);
 *
 * //=point
 */
function point(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    var geom = {
        type: "Point",
        coordinates: coordinates,
    };
    return feature(geom, properties, options);
}
exports.point = point;
/**
 * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.
 *
 * @name points
 * @param {Array<Array<number>>} coordinates an array of Points
 * @param {Object} [properties={}] Translate these properties to each Feature
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
 * associated with the FeatureCollection
 * @param {string|number} [options.id] Identifier associated with the FeatureCollection
 * @returns {FeatureCollection<Point>} Point Feature
 * @example
 * var points = turf.points([
 *   [-75, 39],
 *   [-80, 45],
 *   [-78, 50]
 * ]);
 *
 * //=points
 */
function points(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    return featureCollection(coordinates.map(function (coords) {
        return point(coords, properties);
    }), options);
}
exports.points = points;
/**
 * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.
 *
 * @name polygon
 * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature<Polygon>} Polygon Feature
 * @example
 * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });
 *
 * //=polygon
 */
function polygon(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
        var ring = coordinates_1[_i];
        if (ring.length < 4) {
            throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");
        }
        for (var j = 0; j < ring[ring.length - 1].length; j++) {
            // Check if first point of Polygon contains two numbers
            if (ring[ring.length - 1][j] !== ring[0][j]) {
                throw new Error("First and last Position are not equivalent.");
            }
        }
    }
    var geom = {
        type: "Polygon",
        coordinates: coordinates,
    };
    return feature(geom, properties, options);
}
exports.polygon = polygon;
/**
 * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.
 *
 * @name polygons
 * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the FeatureCollection
 * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection
 * @example
 * var polygons = turf.polygons([
 *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],
 *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],
 * ]);
 *
 * //=polygons
 */
function polygons(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    return featureCollection(coordinates.map(function (coords) {
        return polygon(coords, properties);
    }), options);
}
exports.polygons = polygons;
/**
 * Creates a {@link LineString} {@link Feature} from an Array of Positions.
 *
 * @name lineString
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature<LineString>} LineString Feature
 * @example
 * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});
 * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});
 *
 * //=linestring1
 * //=linestring2
 */
function lineString(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    if (coordinates.length < 2) {
        throw new Error("coordinates must be an array of two or more positions");
    }
    var geom = {
        type: "LineString",
        coordinates: coordinates,
    };
    return feature(geom, properties, options);
}
exports.lineString = lineString;
/**
 * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.
 *
 * @name lineStrings
 * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
 * associated with the FeatureCollection
 * @param {string|number} [options.id] Identifier associated with the FeatureCollection
 * @returns {FeatureCollection<LineString>} LineString FeatureCollection
 * @example
 * var linestrings = turf.lineStrings([
 *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],
 *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]
 * ]);
 *
 * //=linestrings
 */
function lineStrings(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    return featureCollection(coordinates.map(function (coords) {
        return lineString(coords, properties);
    }), options);
}
exports.lineStrings = lineStrings;
/**
 * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
 *
 * @name featureCollection
 * @param {Feature[]} features input features
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {FeatureCollection} FeatureCollection of Features
 * @example
 * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});
 * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});
 * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});
 *
 * var collection = turf.featureCollection([
 *   locationA,
 *   locationB,
 *   locationC
 * ]);
 *
 * //=collection
 */
function featureCollection(features, options) {
    if (options === void 0) { options = {}; }
    var fc = { type: "FeatureCollection" };
    if (options.id) {
        fc.id = options.id;
    }
    if (options.bbox) {
        fc.bbox = options.bbox;
    }
    fc.features = features;
    return fc;
}
exports.featureCollection = featureCollection;
/**
 * Creates a {@link Feature<MultiLineString>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiLineString
 * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature<MultiLineString>} a MultiLineString feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
 *
 * //=multiLine
 */
function multiLineString(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    var geom = {
        type: "MultiLineString",
        coordinates: coordinates,
    };
    return feature(geom, properties, options);
}
exports.multiLineString = multiLineString;
/**
 * Creates a {@link Feature<MultiPoint>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPoint
 * @param {Array<Array<number>>} coordinates an array of Positions
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature<MultiPoint>} a MultiPoint feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPt = turf.multiPoint([[0,0],[10,10]]);
 *
 * //=multiPt
 */
function multiPoint(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    var geom = {
        type: "MultiPoint",
        coordinates: coordinates,
    };
    return feature(geom, properties, options);
}
exports.multiPoint = multiPoint;
/**
 * Creates a {@link Feature<MultiPolygon>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name multiPolygon
 * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature<MultiPolygon>} a multipolygon feature
 * @throws {Error} if no coordinates are passed
 * @example
 * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
 *
 * //=multiPoly
 *
 */
function multiPolygon(coordinates, properties, options) {
    if (options === void 0) { options = {}; }
    var geom = {
        type: "MultiPolygon",
        coordinates: coordinates,
    };
    return feature(geom, properties, options);
}
exports.multiPolygon = multiPolygon;
/**
 * Creates a {@link Feature<GeometryCollection>} based on a
 * coordinate array. Properties can be added optionally.
 *
 * @name geometryCollection
 * @param {Array<Geometry>} geometries an array of GeoJSON Geometries
 * @param {Object} [properties={}] an Object of key-value pairs to add as properties
 * @param {Object} [options={}] Optional Parameters
 * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
 * @param {string|number} [options.id] Identifier associated with the Feature
 * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
 * @example
 * var pt = turf.geometry("Point", [100, 0]);
 * var line = turf.geometry("LineString", [[101, 0], [102, 1]]);
 * var collection = turf.geometryCollection([pt, line]);
 *
 * // => collection
 */
function geometryCollection(geometries, properties, options) {
    if (options === void 0) { options = {}; }
    var geom = {
        type: "GeometryCollection",
        geometries: geometries,
    };
    return feature(geom, properties, options);
}
exports.geometryCollection = geometryCollection;
/**
 * Round number to precision
 *
 * @param {number} num Number
 * @param {number} [precision=0] Precision
 * @returns {number} rounded number
 * @example
 * turf.round(120.4321)
 * //=120
 *
 * turf.round(120.4321, 2)
 * //=120.43
 */
function round(num, precision) {
    if (precision === void 0) { precision = 0; }
    if (precision && !(precision >= 0)) {
        throw new Error("precision must be a positive number");
    }
    var multiplier = Math.pow(10, precision || 0);
    return Math.round(num * multiplier) / multiplier;
}
exports.round = round;
/**
 * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
 *
 * @name radiansToLength
 * @param {number} radians in radians across the sphere
 * @param {string} [units="kilometers"] can be degrees, radians, miles, or kilometers inches, yards, metres,
 * meters, kilometres, kilometers.
 * @returns {number} distance
 */
function radiansToLength(radians, units) {
    if (units === void 0) { units = "kilometers"; }
    var factor = exports.factors[units];
    if (!factor) {
        throw new Error(units + " units is invalid");
    }
    return radians * factor;
}
exports.radiansToLength = radiansToLength;
/**
 * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
 *
 * @name lengthToRadians
 * @param {number} distance in real units
 * @param {string} [units="kilometers"] can be degrees, radians, miles, or kilometers inches, yards, metres,
 * meters, kilometres, kilometers.
 * @returns {number} radians
 */
function lengthToRadians(distance, units) {
    if (units === void 0) { units = "kilometers"; }
    var factor = exports.factors[units];
    if (!factor) {
        throw new Error(units + " units is invalid");
    }
    return distance / factor;
}
exports.lengthToRadians = lengthToRadians;
/**
 * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet
 *
 * @name lengthToDegrees
 * @param {number} distance in real units
 * @param {string} [units="kilometers"] can be degrees, radians, miles, or kilometers inches, yards, metres,
 * meters, kilometres, kilometers.
 * @returns {number} degrees
 */
function lengthToDegrees(distance, units) {
    return radiansToDegrees(lengthToRadians(distance, units));
}
exports.lengthToDegrees = lengthToDegrees;
/**
 * Converts any bearing angle from the north line direction (positive clockwise)
 * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line
 *
 * @name bearingToAzimuth
 * @param {number} bearing angle, between -180 and +180 degrees
 * @returns {number} angle between 0 and 360 degrees
 */
function bearingToAzimuth(bearing) {
    var angle = bearing % 360;
    if (angle < 0) {
        angle += 360;
    }
    return angle;
}
exports.bearingToAzimuth = bearingToAzimuth;
/**
 * Converts an angle in radians to degrees
 *
 * @name radiansToDegrees
 * @param {number} radians angle in radians
 * @returns {number} degrees between 0 and 360 degrees
 */
function radiansToDegrees(radians) {
    var degrees = radians % (2 * Math.PI);
    return degrees * 180 / Math.PI;
}
exports.radiansToDegrees = radiansToDegrees;
/**
 * Converts an angle in degrees to radians
 *
 * @name degreesToRadians
 * @param {number} degrees angle between 0 and 360 degrees
 * @returns {number} angle in radians
 */
function degreesToRadians(degrees) {
    var radians = degrees % 360;
    return radians * Math.PI / 180;
}
exports.degreesToRadians = degreesToRadians;
/**
 * Converts a length to the requested unit.
 * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
 *
 * @param {number} length to be converted
 * @param {Units} [originalUnit="kilometers"] of the length
 * @param {Units} [finalUnit="kilometers"] returned unit
 * @returns {number} the converted length
 */
function convertLength(length, originalUnit, finalUnit) {
    if (originalUnit === void 0) { originalUnit = "kilometers"; }
    if (finalUnit === void 0) { finalUnit = "kilometers"; }
    if (!(length >= 0)) {
        throw new Error("length must be a positive number");
    }
    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);
}
exports.convertLength = convertLength;
/**
 * Converts a area to the requested unit.
 * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches
 * @param {number} area to be converted
 * @param {Units} [originalUnit="meters"] of the distance
 * @param {Units} [finalUnit="kilometers"] returned unit
 * @returns {number} the converted distance
 */
function convertArea(area, originalUnit, finalUnit) {
    if (originalUnit === void 0) { originalUnit = "meters"; }
    if (finalUnit === void 0) { finalUnit = "kilometers"; }
    if (!(area >= 0)) {
        throw new Error("area must be a positive number");
    }
    var startFactor = exports.areaFactors[originalUnit];
    if (!startFactor) {
        throw new Error("invalid original units");
    }
    var finalFactor = exports.areaFactors[finalUnit];
    if (!finalFactor) {
        throw new Error("invalid final units");
    }
    return (area / startFactor) * finalFactor;
}
exports.convertArea = convertArea;
/**
 * isNumber
 *
 * @param {*} num Number to validate
 * @returns {boolean} true/false
 * @example
 * turf.isNumber(123)
 * //=true
 * turf.isNumber('foo')
 * //=false
 */
function isNumber(num) {
    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\s*$/.test(num);
}
exports.isNumber = isNumber;
/**
 * isObject
 *
 * @param {*} input variable to validate
 * @returns {boolean} true/false
 * @example
 * turf.isObject({elevation: 10})
 * //=true
 * turf.isObject('foo')
 * //=false
 */
function isObject(input) {
    return (!!input) && (input.constructor === Object);
}
exports.isObject = isObject;
/**
 * Validate BBox
 *
 * @private
 * @param {Array<number>} bbox BBox to validate
 * @returns {void}
 * @throws Error if BBox is not valid
 * @example
 * validateBBox([-180, -40, 110, 50])
 * //=OK
 * validateBBox([-180, -40])
 * //=Error
 * validateBBox('Foo')
 * //=Error
 * validateBBox(5)
 * //=Error
 * validateBBox(null)
 * //=Error
 * validateBBox(undefined)
 * //=Error
 */
function validateBBox(bbox) {
    if (!bbox) {
        throw new Error("bbox is required");
    }
    if (!Array.isArray(bbox)) {
        throw new Error("bbox must be an Array");
    }
    if (bbox.length !== 4 && bbox.length !== 6) {
        throw new Error("bbox must be an Array of 4 or 6 numbers");
    }
    bbox.forEach(function (num) {
        if (!isNumber(num)) {
            throw new Error("bbox must only contain numbers");
        }
    });
}
exports.validateBBox = validateBBox;
/**
 * Validate Id
 *
 * @private
 * @param {string|number} id Id to validate
 * @returns {void}
 * @throws Error if Id is not valid
 * @example
 * validateId([-180, -40, 110, 50])
 * //=Error
 * validateId([-180, -40])
 * //=Error
 * validateId('Foo')
 * //=OK
 * validateId(5)
 * //=OK
 * validateId(null)
 * //=Error
 * validateId(undefined)
 * //=Error
 */
function validateId(id) {
    if (!id) {
        throw new Error("id is required");
    }
    if (["string", "number"].indexOf(typeof id) === -1) {
        throw new Error("id must be a number or a string");
    }
}
exports.validateId = validateId;
// Deprecated methods
function radians2degrees() {
    throw new Error("method has been renamed to `radiansToDegrees`");
}
exports.radians2degrees = radians2degrees;
function degrees2radians() {
    throw new Error("method has been renamed to `degreesToRadians`");
}
exports.degrees2radians = degrees2radians;
function distanceToDegrees() {
    throw new Error("method has been renamed to `lengthToDegrees`");
}
exports.distanceToDegrees = distanceToDegrees;
function distanceToRadians() {
    throw new Error("method has been renamed to `lengthToRadians`");
}
exports.distanceToRadians = distanceToRadians;
function radiansToDistance() {
    throw new Error("method has been renamed to `radiansToLength`");
}
exports.radiansToDistance = radiansToDistance;
function bearingToAngle() {
    throw new Error("method has been renamed to `bearingToAzimuth`");
}
exports.bearingToAngle = bearingToAngle;
function convertDistance() {
    throw new Error("method has been renamed to `convertLength`");
}
exports.convertDistance = convertDistance;
});

unwrapExports(helpers);
var helpers_1 = helpers.earthRadius;
var helpers_2 = helpers.factors;
var helpers_3 = helpers.unitsFactors;
var helpers_4 = helpers.areaFactors;
var helpers_5 = helpers.feature;
var helpers_6 = helpers.geometry;
var helpers_7 = helpers.point;
var helpers_8 = helpers.points;
var helpers_9 = helpers.polygon;
var helpers_10 = helpers.polygons;
var helpers_11 = helpers.lineString;
var helpers_12 = helpers.lineStrings;
var helpers_13 = helpers.featureCollection;
var helpers_14 = helpers.multiLineString;
var helpers_15 = helpers.multiPoint;
var helpers_16 = helpers.multiPolygon;
var helpers_17 = helpers.geometryCollection;
var helpers_18 = helpers.round;
var helpers_19 = helpers.radiansToLength;
var helpers_20 = helpers.lengthToRadians;
var helpers_21 = helpers.lengthToDegrees;
var helpers_22 = helpers.bearingToAzimuth;
var helpers_23 = helpers.radiansToDegrees;
var helpers_24 = helpers.degreesToRadians;
var helpers_25 = helpers.convertLength;
var helpers_26 = helpers.convertArea;
var helpers_27 = helpers.isNumber;
var helpers_28 = helpers.isObject;
var helpers_29 = helpers.validateBBox;
var helpers_30 = helpers.validateId;
var helpers_31 = helpers.radians2degrees;
var helpers_32 = helpers.degrees2radians;
var helpers_33 = helpers.distanceToDegrees;
var helpers_34 = helpers.distanceToRadians;
var helpers_35 = helpers.radiansToDistance;
var helpers_36 = helpers.bearingToAngle;
var helpers_37 = helpers.convertDistance;

var meta = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });



/**
 * Callback for coordEach
 *
 * @callback coordEachCallback
 * @param {Array<number>} currentCoord The current coordinate being processed.
 * @param {number} coordIndex The current index of the coordinate being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
 * @param {number} geometryIndex The current index of the Geometry being processed.
 */

/**
 * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
 *
 * @name coordEach
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
 * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
 * @returns {void}
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {"foo": "bar"}),
 *   turf.point([36, 53], {"hello": "world"})
 * ]);
 *
 * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
 *   //=currentCoord
 *   //=coordIndex
 *   //=featureIndex
 *   //=multiFeatureIndex
 *   //=geometryIndex
 * });
 */
function coordEach(geojson, callback, excludeWrapCoord) {
    // Handles null Geometry -- Skips this GeoJSON
    if (geojson === null) return;
    var j, k, l, geometry, stopG, coords,
        geometryMaybeCollection,
        wrapShrink = 0,
        coordIndex = 0,
        isGeometryCollection,
        type = geojson.type,
        isFeatureCollection = type === 'FeatureCollection',
        isFeature = type === 'Feature',
        stop = isFeatureCollection ? geojson.features.length : 1;

    // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.
    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :
            (isFeature ? geojson.geometry : geojson));
        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
            var multiFeatureIndex = 0;
            var geometryIndex = 0;
            geometry = isGeometryCollection ?
                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;

            // Handles null Geometry -- Skips this geometry
            if (geometry === null) continue;
            coords = geometry.coordinates;
            var geomType = geometry.type;

            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;

            switch (geomType) {
            case null:
                break;
            case 'Point':
                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                coordIndex++;
                multiFeatureIndex++;
                break;
            case 'LineString':
            case 'MultiPoint':
                for (j = 0; j < coords.length; j++) {
                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                    coordIndex++;
                    if (geomType === 'MultiPoint') multiFeatureIndex++;
                }
                if (geomType === 'LineString') multiFeatureIndex++;
                break;
            case 'Polygon':
            case 'MultiLineString':
                for (j = 0; j < coords.length; j++) {
                    for (k = 0; k < coords[j].length - wrapShrink; k++) {
                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                        coordIndex++;
                    }
                    if (geomType === 'MultiLineString') multiFeatureIndex++;
                    if (geomType === 'Polygon') geometryIndex++;
                }
                if (geomType === 'Polygon') multiFeatureIndex++;
                break;
            case 'MultiPolygon':
                for (j = 0; j < coords.length; j++) {
                    geometryIndex = 0;
                    for (k = 0; k < coords[j].length; k++) {
                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                            coordIndex++;
                        }
                        geometryIndex++;
                    }
                    multiFeatureIndex++;
                }
                break;
            case 'GeometryCollection':
                for (j = 0; j < geometry.geometries.length; j++)
                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;
                break;
            default:
                throw new Error('Unknown Geometry Type');
            }
        }
    }
}

/**
 * Callback for coordReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback coordReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Array<number>} currentCoord The current coordinate being processed.
 * @param {number} coordIndex The current index of the coordinate being processed.
 * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
 * @param {number} geometryIndex The current index of the Geometry being processed.
 */

/**
 * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
 *
 * @name coordReduce
 * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {"foo": "bar"}),
 *   turf.point([36, 53], {"hello": "world"})
 * ]);
 *
 * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
 *   //=previousValue
 *   //=currentCoord
 *   //=coordIndex
 *   //=featureIndex
 *   //=multiFeatureIndex
 *   //=geometryIndex
 *   return currentCoord;
 * });
 */
function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;
        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
    }, excludeWrapCoord);
    return previousValue;
}

/**
 * Callback for propEach
 *
 * @callback propEachCallback
 * @param {Object} currentProperties The current Properties being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 */

/**
 * Iterate over properties in any GeoJSON object, similar to Array.forEach()
 *
 * @name propEach
 * @param {FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentProperties, featureIndex)
 * @returns {void}
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.propEach(features, function (currentProperties, featureIndex) {
 *   //=currentProperties
 *   //=featureIndex
 * });
 */
function propEach(geojson, callback) {
    var i;
    switch (geojson.type) {
    case 'FeatureCollection':
        for (i = 0; i < geojson.features.length; i++) {
            if (callback(geojson.features[i].properties, i) === false) break;
        }
        break;
    case 'Feature':
        callback(geojson.properties, 0);
        break;
    }
}


/**
 * Callback for propReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback propReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {*} currentProperties The current Properties being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 */

/**
 * Reduce properties in any GeoJSON object into a single value,
 * similar to how Array.reduce works. However, in this case we lazily run
 * the reduction, so an array of all properties is unnecessary.
 *
 * @name propReduce
 * @param {FeatureCollection|Feature} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
 *   //=previousValue
 *   //=currentProperties
 *   //=featureIndex
 *   return currentProperties
 * });
 */
function propReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    propEach(geojson, function (currentProperties, featureIndex) {
        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;
        else previousValue = callback(previousValue, currentProperties, featureIndex);
    });
    return previousValue;
}

/**
 * Callback for featureEach
 *
 * @callback featureEachCallback
 * @param {Feature<any>} currentFeature The current Feature being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 */

/**
 * Iterate over features in any GeoJSON object, similar to
 * Array.forEach.
 *
 * @name featureEach
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentFeature, featureIndex)
 * @returns {void}
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {foo: 'bar'}),
 *   turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.featureEach(features, function (currentFeature, featureIndex) {
 *   //=currentFeature
 *   //=featureIndex
 * });
 */
function featureEach(geojson, callback) {
    if (geojson.type === 'Feature') {
        callback(geojson, 0);
    } else if (geojson.type === 'FeatureCollection') {
        for (var i = 0; i < geojson.features.length; i++) {
            if (callback(geojson.features[i], i) === false) break;
        }
    }
}

/**
 * Callback for featureReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback featureReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature} currentFeature The current Feature being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 */

/**
 * Reduce features in any GeoJSON object, similar to Array.reduce().
 *
 * @name featureReduce
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {"foo": "bar"}),
 *   turf.point([36, 53], {"hello": "world"})
 * ]);
 *
 * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
 *   //=previousValue
 *   //=currentFeature
 *   //=featureIndex
 *   return currentFeature
 * });
 */
function featureReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    featureEach(geojson, function (currentFeature, featureIndex) {
        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;
        else previousValue = callback(previousValue, currentFeature, featureIndex);
    });
    return previousValue;
}

/**
 * Get all coordinates from any GeoJSON object.
 *
 * @name coordAll
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @returns {Array<Array<number>>} coordinate position array
 * @example
 * var features = turf.featureCollection([
 *   turf.point([26, 37], {foo: 'bar'}),
 *   turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * var coords = turf.coordAll(features);
 * //= [[26, 37], [36, 53]]
 */
function coordAll(geojson) {
    var coords = [];
    coordEach(geojson, function (coord) {
        coords.push(coord);
    });
    return coords;
}

/**
 * Callback for geomEach
 *
 * @callback geomEachCallback
 * @param {Geometry} currentGeometry The current Geometry being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {Object} featureProperties The current Feature Properties being processed.
 * @param {Array<number>} featureBBox The current Feature BBox being processed.
 * @param {number|string} featureId The current Feature Id being processed.
 */

/**
 * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
 *
 * @name geomEach
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
 * @returns {void}
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
 *   //=currentGeometry
 *   //=featureIndex
 *   //=featureProperties
 *   //=featureBBox
 *   //=featureId
 * });
 */
function geomEach(geojson, callback) {
    var i, j, g, geometry, stopG,
        geometryMaybeCollection,
        isGeometryCollection,
        featureProperties,
        featureBBox,
        featureId,
        featureIndex = 0,
        isFeatureCollection = geojson.type === 'FeatureCollection',
        isFeature = geojson.type === 'Feature',
        stop = isFeatureCollection ? geojson.features.length : 1;

    // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.
    for (i = 0; i < stop; i++) {

        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :
            (isFeature ? geojson.geometry : geojson));
        featureProperties = (isFeatureCollection ? geojson.features[i].properties :
            (isFeature ? geojson.properties : {}));
        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :
            (isFeature ? geojson.bbox : undefined));
        featureId = (isFeatureCollection ? geojson.features[i].id :
            (isFeature ? geojson.id : undefined));
        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;
        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

        for (g = 0; g < stopG; g++) {
            geometry = isGeometryCollection ?
                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;

            // Handle null Geometry
            if (geometry === null) {
                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                continue;
            }
            switch (geometry.type) {
            case 'Point':
            case 'LineString':
            case 'MultiPoint':
            case 'Polygon':
            case 'MultiLineString':
            case 'MultiPolygon': {
                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                break;
            }
            case 'GeometryCollection': {
                for (j = 0; j < geometry.geometries.length; j++) {
                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                }
                break;
            }
            default:
                throw new Error('Unknown Geometry Type');
            }
        }
        // Only increase `featureIndex` per each feature
        featureIndex++;
    }
}

/**
 * Callback for geomReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback geomReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Geometry} currentGeometry The current Geometry being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {Object} featureProperties The current Feature Properties being processed.
 * @param {Array<number>} featureBBox The current Feature BBox being processed.
 * @param {number|string} featureId The current Feature Id being processed.
 */

/**
 * Reduce geometry in any GeoJSON object, similar to Array.reduce().
 *
 * @name geomReduce
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.point([36, 53], {hello: 'world'})
 * ]);
 *
 * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
 *   //=previousValue
 *   //=currentGeometry
 *   //=featureIndex
 *   //=featureProperties
 *   //=featureBBox
 *   //=featureId
 *   return currentGeometry
 * });
 */
function geomReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;
        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
    });
    return previousValue;
}

/**
 * Callback for flattenEach
 *
 * @callback flattenEachCallback
 * @param {Feature} currentFeature The current flattened feature being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
 */

/**
 * Iterate over flattened features in any GeoJSON object, similar to
 * Array.forEach.
 *
 * @name flattenEach
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
 * ]);
 *
 * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
 *   //=currentFeature
 *   //=featureIndex
 *   //=multiFeatureIndex
 * });
 */
function flattenEach(geojson, callback) {
    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
        // Callback for single geometry
        var type = (geometry === null) ? null : geometry.type;
        switch (type) {
        case null:
        case 'Point':
        case 'LineString':
        case 'Polygon':
            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;
            return;
        }

        var geomType;

        // Callback for multi-geometry
        switch (type) {
        case 'MultiPoint':
            geomType = 'Point';
            break;
        case 'MultiLineString':
            geomType = 'LineString';
            break;
        case 'MultiPolygon':
            geomType = 'Polygon';
            break;
        }

        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
            var coordinate = geometry.coordinates[multiFeatureIndex];
            var geom = {
                type: geomType,
                coordinates: coordinate
            };
            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
        }
    });
}

/**
 * Callback for flattenReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback flattenReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature} currentFeature The current Feature being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
 */

/**
 * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
 *
 * @name flattenReduce
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
 * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var features = turf.featureCollection([
 *     turf.point([26, 37], {foo: 'bar'}),
 *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
 * ]);
 *
 * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
 *   //=previousValue
 *   //=currentFeature
 *   //=featureIndex
 *   //=multiFeatureIndex
 *   return currentFeature
 * });
 */
function flattenReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {
        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;
        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);
    });
    return previousValue;
}

/**
 * Callback for segmentEach
 *
 * @callback segmentEachCallback
 * @param {Feature<LineString>} currentSegment The current Segment being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
 * @param {number} geometryIndex The current index of the Geometry being processed.
 * @param {number} segmentIndex The current index of the Segment being processed.
 * @returns {void}
 */

/**
 * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
 * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
 *
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
 * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
 * @returns {void}
 * @example
 * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
 *
 * // Iterate over GeoJSON by 2-vertex segments
 * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
 *   //=currentSegment
 *   //=featureIndex
 *   //=multiFeatureIndex
 *   //=geometryIndex
 *   //=segmentIndex
 * });
 *
 * // Calculate the total number of segments
 * var total = 0;
 * turf.segmentEach(polygon, function () {
 *     total++;
 * });
 */
function segmentEach(geojson, callback) {
    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
        var segmentIndex = 0;

        // Exclude null Geometries
        if (!feature.geometry) return;
        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
        var type = feature.geometry.type;
        if (type === 'Point' || type === 'MultiPoint') return;

        // Generate 2-vertex line segments
        var previousCoords;
        var previousFeatureIndex = 0;
        var previousMultiIndex = 0;
        var prevGeomIndex = 0;
        if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
            if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
                previousCoords = currentCoord;
                previousFeatureIndex = featureIndex;
                previousMultiIndex = multiPartIndexCoord;
                prevGeomIndex = geometryIndex;
                segmentIndex = 0;
                return;
            }
            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);
            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;
            segmentIndex++;
            previousCoords = currentCoord;
        }) === false) return false;
    });
}

/**
 * Callback for segmentReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback segmentReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature<LineString>} currentSegment The current Segment being processed.
 * @param {number} featureIndex The current index of the Feature being processed.
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
 * @param {number} geometryIndex The current index of the Geometry being processed.
 * @param {number} segmentIndex The current index of the Segment being processed.
 */

/**
 * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
 * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
 *
 * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
 * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {void}
 * @example
 * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
 *
 * // Iterate over GeoJSON by 2-vertex segments
 * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
 *   //= previousSegment
 *   //= currentSegment
 *   //= featureIndex
 *   //= multiFeatureIndex
 *   //= geometryIndex
 *   //= segmentInex
 *   return currentSegment
 * });
 *
 * // Calculate the total number of segments
 * var initialValue = 0
 * var total = turf.segmentReduce(polygon, function (previousValue) {
 *     previousValue++;
 *     return previousValue;
 * }, initialValue);
 */
function segmentReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    var started = false;
    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
        if (started === false && initialValue === undefined) previousValue = currentSegment;
        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);
        started = true;
    });
    return previousValue;
}

/**
 * Callback for lineEach
 *
 * @callback lineEachCallback
 * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
 * @param {number} featureIndex The current index of the Feature being processed
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
 * @param {number} geometryIndex The current index of the Geometry being processed
 */

/**
 * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
 * similar to Array.forEach.
 *
 * @name lineEach
 * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
 * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
 * @example
 * var multiLine = turf.multiLineString([
 *   [[26, 37], [35, 45]],
 *   [[36, 53], [38, 50], [41, 55]]
 * ]);
 *
 * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
 *   //=currentLine
 *   //=featureIndex
 *   //=multiFeatureIndex
 *   //=geometryIndex
 * });
 */
function lineEach(geojson, callback) {
    // validation
    if (!geojson) throw new Error('geojson is required');

    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
        if (feature.geometry === null) return;
        var type = feature.geometry.type;
        var coords = feature.geometry.coordinates;
        switch (type) {
        case 'LineString':
            if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;
            break;
        case 'Polygon':
            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
                if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
            }
            break;
        }
    });
}

/**
 * Callback for lineReduce
 *
 * The first time the callback function is called, the values provided as arguments depend
 * on whether the reduce method has an initialValue argument.
 *
 * If an initialValue is provided to the reduce method:
 *  - The previousValue argument is initialValue.
 *  - The currentValue argument is the value of the first element present in the array.
 *
 * If an initialValue is not provided:
 *  - The previousValue argument is the value of the first element present in the array.
 *  - The currentValue argument is the value of the second element present in the array.
 *
 * @callback lineReduceCallback
 * @param {*} previousValue The accumulated value previously returned in the last invocation
 * of the callback, or initialValue, if supplied.
 * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
 * @param {number} featureIndex The current index of the Feature being processed
 * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
 * @param {number} geometryIndex The current index of the Geometry being processed
 */

/**
 * Reduce features in any GeoJSON object, similar to Array.reduce().
 *
 * @name lineReduce
 * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
 * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
 * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
 * @returns {*} The value that results from the reduction.
 * @example
 * var multiPoly = turf.multiPolygon([
 *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
 *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
 * ]);
 *
 * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
 *   //=previousValue
 *   //=currentLine
 *   //=featureIndex
 *   //=multiFeatureIndex
 *   //=geometryIndex
 *   return currentLine
 * });
 */
function lineReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;
        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);
    });
    return previousValue;
}

/**
 * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
 *
 * Negative indexes are permitted.
 * Point & MultiPoint will always return null.
 *
 * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
 * @param {Object} [options={}] Optional parameters
 * @param {number} [options.featureIndex=0] Feature Index
 * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
 * @param {number} [options.geometryIndex=0] Geometry Index
 * @param {number} [options.segmentIndex=0] Segment Index
 * @param {Object} [options.properties={}] Translate Properties to output LineString
 * @param {BBox} [options.bbox={}] Translate BBox to output LineString
 * @param {number|string} [options.id={}] Translate Id to output LineString
 * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
 * @example
 * var multiLine = turf.multiLineString([
 *     [[10, 10], [50, 30], [30, 40]],
 *     [[-10, -10], [-50, -30], [-30, -40]]
 * ]);
 *
 * // First Segment (defaults are 0)
 * turf.findSegment(multiLine);
 * // => Feature<LineString<[[10, 10], [50, 30]]>>
 *
 * // First Segment of 2nd Multi Feature
 * turf.findSegment(multiLine, {multiFeatureIndex: 1});
 * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
 *
 * // Last Segment of Last Multi Feature
 * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
 * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
 */
function findSegment(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!helpers.isObject(options)) throw new Error('options is invalid');
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var segmentIndex = options.segmentIndex || 0;

    // Find FeatureIndex
    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
    case 'FeatureCollection':
        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;
    case 'Feature':
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;
    case 'Point':
    case 'MultiPoint':
        return null;
    case 'LineString':
    case 'Polygon':
    case 'MultiLineString':
    case 'MultiPolygon':
        geometry = geojson;
        break;
    default:
        throw new Error('geojson is invalid');
    }

    // Find SegmentIndex
    if (geometry === null) return null;
    var coords = geometry.coordinates;
    switch (geometry.type) {
    case 'Point':
    case 'MultiPoint':
        return null;
    case 'LineString':
        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);
    case 'Polygon':
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);
    case 'MultiLineString':
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);
    case 'MultiPolygon':
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);
    }
    throw new Error('geojson is invalid');
}

/**
 * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
 *
 * Negative indexes are permitted.
 *
 * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
 * @param {Object} [options={}] Optional parameters
 * @param {number} [options.featureIndex=0] Feature Index
 * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
 * @param {number} [options.geometryIndex=0] Geometry Index
 * @param {number} [options.coordIndex=0] Coord Index
 * @param {Object} [options.properties={}] Translate Properties to output Point
 * @param {BBox} [options.bbox={}] Translate BBox to output Point
 * @param {number|string} [options.id={}] Translate Id to output Point
 * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
 * @example
 * var multiLine = turf.multiLineString([
 *     [[10, 10], [50, 30], [30, 40]],
 *     [[-10, -10], [-50, -30], [-30, -40]]
 * ]);
 *
 * // First Segment (defaults are 0)
 * turf.findPoint(multiLine);
 * // => Feature<Point<[10, 10]>>
 *
 * // First Segment of the 2nd Multi-Feature
 * turf.findPoint(multiLine, {multiFeatureIndex: 1});
 * // => Feature<Point<[-10, -10]>>
 *
 * // Last Segment of last Multi-Feature
 * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
 * // => Feature<Point<[-30, -40]>>
 */
function findPoint(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!helpers.isObject(options)) throw new Error('options is invalid');
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var coordIndex = options.coordIndex || 0;

    // Find FeatureIndex
    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
    case 'FeatureCollection':
        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;
    case 'Feature':
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;
    case 'Point':
    case 'MultiPoint':
        return null;
    case 'LineString':
    case 'Polygon':
    case 'MultiLineString':
    case 'MultiPolygon':
        geometry = geojson;
        break;
    default:
        throw new Error('geojson is invalid');
    }

    // Find Coord Index
    if (geometry === null) return null;
    var coords = geometry.coordinates;
    switch (geometry.type) {
    case 'Point':
        return helpers.point(coords, properties, options);
    case 'MultiPoint':
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        return helpers.point(coords[multiFeatureIndex], properties, options);
    case 'LineString':
        if (coordIndex < 0) coordIndex = coords.length + coordIndex;
        return helpers.point(coords[coordIndex], properties, options);
    case 'Polygon':
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;
        return helpers.point(coords[geometryIndex][coordIndex], properties, options);
    case 'MultiLineString':
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;
        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);
    case 'MultiPolygon':
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);
    }
    throw new Error('geojson is invalid');
}

exports.coordEach = coordEach;
exports.coordReduce = coordReduce;
exports.propEach = propEach;
exports.propReduce = propReduce;
exports.featureEach = featureEach;
exports.featureReduce = featureReduce;
exports.coordAll = coordAll;
exports.geomEach = geomEach;
exports.geomReduce = geomReduce;
exports.flattenEach = flattenEach;
exports.flattenReduce = flattenReduce;
exports.segmentEach = segmentEach;
exports.segmentReduce = segmentReduce;
exports.lineEach = lineEach;
exports.lineReduce = lineReduce;
exports.findSegment = findSegment;
exports.findPoint = findPoint;
});

unwrapExports(meta);
var meta_1 = meta.coordEach;
var meta_2 = meta.coordReduce;
var meta_3 = meta.propEach;
var meta_4 = meta.propReduce;
var meta_5 = meta.featureEach;
var meta_6 = meta.featureReduce;
var meta_7 = meta.coordAll;
var meta_8 = meta.geomEach;
var meta_9 = meta.geomReduce;
var meta_10 = meta.flattenEach;
var meta_11 = meta.flattenReduce;
var meta_12 = meta.segmentEach;
var meta_13 = meta.segmentReduce;
var meta_14 = meta.lineEach;
var meta_15 = meta.lineReduce;
var meta_16 = meta.findSegment;
var meta_17 = meta.findPoint;

var bbox_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
 *
 * @name bbox
 * @param {GeoJSON} geojson any GeoJSON object
 * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order
 * @example
 * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
 * var bbox = turf.bbox(line);
 * var bboxPolygon = turf.bboxPolygon(bbox);
 *
 * //addToMap
 * var addToMap = [line, bboxPolygon]
 */
function bbox(geojson) {
    var result = [Infinity, Infinity, -Infinity, -Infinity];
    meta.coordEach(geojson, function (coord) {
        if (result[0] > coord[0]) {
            result[0] = coord[0];
        }
        if (result[1] > coord[1]) {
            result[1] = coord[1];
        }
        if (result[2] < coord[0]) {
            result[2] = coord[0];
        }
        if (result[3] < coord[1]) {
            result[3] = coord[1];
        }
    });
    return result;
}
exports.default = bbox;
});

var bbox = unwrapExports(bbox_1);

/* src/componentes/general/Mapa/MapaCapa.svelte generated by Svelte v3.12.1 */

function create_fragment$3(ctx) {
	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$3.name, type: "component", source: "", ctx });
	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	

	const dispatch = createEventDispatcher();

	const forward = (event) => {

    map.fitBounds(bbox(polygon),{
      padding: {top: 25, bottom:25, left: 25, right: 25}
    });
    
    dispatch('layerclick', id);

	};

  let { polygon, id } = $$props;
  
  const { getMap } = getContext(key);

  const map = getMap();
  let layer;

  onMount(async () => {

    map.on('styledata', () => {

      if ( !layer ) {
        layer = map.addLayer({
          'id': id,
          'type': 'fill',
          'source': {
            'type': 'geojson',
            'data': polygon
          },
          'layout': {},
          'paint': {
            'fill-color': '#088',
            'fill-opacity': 0.8
          }
        });

      }

    });

    map.on('click', id, forward);

  });

	const writable_props = ['polygon', 'id'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<MapaCapa> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('polygon' in $$props) $$invalidate('polygon', polygon = $$props.polygon);
		if ('id' in $$props) $$invalidate('id', id = $$props.id);
	};

	$$self.$capture_state = () => {
		return { polygon, id, layer };
	};

	$$self.$inject_state = $$props => {
		if ('polygon' in $$props) $$invalidate('polygon', polygon = $$props.polygon);
		if ('id' in $$props) $$invalidate('id', id = $$props.id);
		if ('layer' in $$props) layer = $$props.layer;
	};

	return { polygon, id };
}

class MapaCapa extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$3, safe_not_equal, ["polygon", "id"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "MapaCapa", options, id: create_fragment$3.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.polygon === undefined && !('polygon' in props)) {
			console.warn("<MapaCapa> was created without expected prop 'polygon'");
		}
		if (ctx.id === undefined && !('id' in props)) {
			console.warn("<MapaCapa> was created without expected prop 'id'");
		}
	}

	get polygon() {
		throw new Error("<MapaCapa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set polygon(value) {
		throw new Error("<MapaCapa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<MapaCapa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<MapaCapa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/componentes/general/Mapa/MapaMarcador.svelte generated by Svelte v3.12.1 */

function create_fragment$4(ctx) {
	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$4.name, type: "component", source: "", ctx });
	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	

	
	const { getMap } = getContext(key);
	const map = getMap();

	let { lat, lon, label } = $$props;

	onMount(async () => {

		const mapboxModule = await import('./mapbox-gl.c6da7a07.js');
		const mapbox = mapboxModule.default;

		const popup = new mapbox.Popup({ offset: 25 })
			.setText(label);

		const marker = new mapbox.Marker()
			.setLngLat([lon, lat])
			.setPopup(popup)
			.addTo(map);
	});

	const writable_props = ['lat', 'lon', 'label'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<MapaMarcador> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('lat' in $$props) $$invalidate('lat', lat = $$props.lat);
		if ('lon' in $$props) $$invalidate('lon', lon = $$props.lon);
		if ('label' in $$props) $$invalidate('label', label = $$props.label);
	};

	$$self.$capture_state = () => {
		return { lat, lon, label };
	};

	$$self.$inject_state = $$props => {
		if ('lat' in $$props) $$invalidate('lat', lat = $$props.lat);
		if ('lon' in $$props) $$invalidate('lon', lon = $$props.lon);
		if ('label' in $$props) $$invalidate('label', label = $$props.label);
	};

	return { lat, lon, label };
}

class MapaMarcador extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$4, safe_not_equal, ["lat", "lon", "label"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "MapaMarcador", options, id: create_fragment$4.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.lat === undefined && !('lat' in props)) {
			console.warn("<MapaMarcador> was created without expected prop 'lat'");
		}
		if (ctx.lon === undefined && !('lon' in props)) {
			console.warn("<MapaMarcador> was created without expected prop 'lon'");
		}
		if (ctx.label === undefined && !('label' in props)) {
			console.warn("<MapaMarcador> was created without expected prop 'label'");
		}
	}

	get lat() {
		throw new Error("<MapaMarcador>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lat(value) {
		throw new Error("<MapaMarcador>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lon() {
		throw new Error("<MapaMarcador>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lon(value) {
		throw new Error("<MapaMarcador>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<MapaMarcador>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<MapaMarcador>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var familias = [{ID_FAM:1,CLAVE_FAM:"01",NOM_FAM:"Álgica",id:"algica",agrupaciones:["kickapoo"],path:"<path d=\"M55.71565511111111,43.638979361569135 55.39485043738365,43.731105438553186 55.19822424760385,43.97176181763929 55.20021842204525,44.268182685305675 55.398077470235464,44.507163832515296 55.71565511111111,44.59825441620864 56.03323275198677,44.507163832515296 56.23109180017698,44.268182685305675 56.23308597461838,43.97176181763929 56.036459784838584,43.73110543855319 55.71565511111111,43.638979361569135Z\"/>",geojson:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[-101.64986,28.632685272793402],[-102.10099157242924,28.50313297703458],[-102.37749715180709,28.16470994394474],[-102.37469284399886,27.747868098788903],[-102.09645355748138,27.411800860525364],[-101.64986,27.283704727206597],[-101.2032664425186,27.41180086052536],[-100.92502715600112,27.747868098788903],[-100.9222228481929,28.16470994394474],[-101.19872842757074,28.503132977034575],[-101.64986,28.632685272793402]]]}}},{ID_FAM:2,CLAVE_FAM:"02",NOM_FAM:"Yuto-nahua",id:"yutonahua",agrupaciones:["papago","pima","tepehuanodelnorte","tepehuanodelsur","tarahumara","guarijio","yaqui","mayo","cora","huichol","nahuatl"],path:"<path d=\"M52.881976888888886,47.948643555555556 52.904099555555554,47.85856711111111 52.73422222222222,47.83347911111111 52.848988444444444,47.73629866666667 53.00760177777777,47.885631999999994 53.07160177777778,47.54093511111111 53.19111111111111,47.440000000000005 52.99081244444445,47.394176 53.12573155555556,47.33649066666667 53.07713422222222,47.09096533333334 53.22390044444444,47.36928711111111 53.45284266666666,47.500643555555556 53.39298844444444,47.55496533333333 53.273087999999994,47.413333333333334 53.20652088888889,47.49550933333333 53.329976888888886,47.75684266666667 53.13462044444445,47.92197688888889 53.291456,47.924544 53.47950933333334,47.48246755555556 53.64175879780515,47.45490602504606 53.56819911111111,46.916543999999995 53.66041121927954,47.44716853125877 53.76315733333333,47.30804622222222 53.83545599999999,47.40523377777778 54.09915733333333,47.229824 53.85204622222222,47.51466666666666 53.88503466666667,47.691854222222226 54.41086577777778,47.72543288888889 53.90913422222222,47.96503466666666 53.74044444444445,47.917034666666666 53.77224533333334,48.204842666666664 53.64878933333334,48.56434488888889 53.812544,48.848 53.64128711111111,48.48395377777778 53.38409955555555,48.44898844444444 53.233578666666666,48.554467555555554 53.25293511111111,48.76167822222222 52.90391127323358,48.545386984370914 52.873087999999996,48.19950933333334 52.92622222222222,48.422912 53.253731555555554,48.152490666666665 53.305088,48.29609955555556 53.46620962159058,48.32021563719203 53.24839822222222,48.02350933333334 53.16681244444444,48.13392355555556 53.008199111111104,47.93125688888889 52.881976888888886,47.948643555555556 M53.58103466666667,47.89452088888889 53.537187555555555,47.93876622222222 53.63729812490866,47.94077546838 53.58103466666667,47.89452088888889 M53.41353244444444,47.92177777777778 53.46488888888889,47.923157333333336 53.466923650061176,47.917075002433286 53.41353244444444,47.92177777777778 M53.53743698481607,47.41958324575592 53.52731022222222,47.43723377777777 53.521926412295414,47.49345929918555 53.532444444444444,47.496490666666666 53.53743698481607,47.41958324575592 M47.75347911111111,42.473678222222226 48.06321066666667,41.65195377777778 47.626666666666665,41.45204622222222 47.74795377777778,41.343011555555556 48.371953777777776,41.566812444444444 48.16434488888889,41.75209955555555 48.47268977777778,42.15921066666667 48.242368,42.157824000000005 48.039509333333335,41.986176 47.75347911111111,42.473678222222226 M50.81560177777778,43.55377777777778 50.454912,43.908145777777776 50.80434488888889,43.27328711111111 50.75160177777778,43.07022222222222 50.947953777777784,42.73501155555555 50.78321066666666,43.22706488888889 51.099455999999996,43.242666666666665 50.85906488888889,43.26478933333333 50.81560177777778,43.55377777777778 M50.87664355555556,43.772643555555554 50.87328711111111,43.58913422222222 51.320490666666664,43.41096533333333 51.094712888888886,43.68493511111111 50.940444444444445,43.68414577777778 51.020245333333335,43.88385422222222 50.87664355555556,43.772643555555554 M50.54715733333334,43.82893511111111 50.815800888888894,43.77678933333333 50.753379555555554,43.839999999999996 50.54715733333334,43.82893511111111 M51.89195377777778,45.725632000000004 51.72266666666667,45.412544 51.41787733333333,45.39022222222222 51.51312670528353,45.24066588849099 51.393187555555556,45.340245333333336 51.19426844444445,45.203356444444445 51.271111111111104,45.08049066666667 51.18735644444444,44.94281244444444 51.33984563731065,44.733824 51.19684266666666,44.87743288888889 51.08029866666667,44.85826844444445 51.04888888888888,44.696298666666664 50.78597688888888,44.728490666666666 50.822712888888894,44.347854222222225 50.72652088888889,44.39288888888888 50.454912,43.908145777777776 50.72,44.06123377777778 50.82468977777777,43.94567822222222 50.80750933333333,44.177379555555554 51.073379555555555,44.08967822222222 51.236543999999995,44.290368 51.221333333333334,44.133731555555556 51.29580088888889,44.152490666666665 51.25056711111112,44.38281244444445 51.381532444444446,44.448398222222224 51.52177777777778,44.33501155555555 51.74478933333333,44.38321066666666 51.299157333333326,44.33876622222222 51.435455999999995,44.03634488888889 51.35387733333334,43.89076622222222 51.24957866666667,43.97985422222222 51.164842666666665,43.91743288888889 51.37521066666667,43.814912 51.298176,43.71575466666666 51.497088,43.667157333333336 51.56187733333333,43.452444444444446 51.62547911111111,43.718321777777774 51.757432888888886,43.70488888888889 51.896490666666665,43.48642133333333 51.83684266666667,43.27743288888889 52.02468977777777,43.42874311111111 52.00355555555555,43.69007644444445 52.19950933333333,43.76652088888889 51.77836799999999,43.83802311111111 51.64404622222223,44.00335644444444 51.787854222222215,44.14222222222222 52.09521066666666,44.05728711111111 52.22024533333333,44.204046222222225 51.993287111111115,44.246712888888894 52.10409955555555,44.42864355555555 52.25678933333333,44.443456 51.98973155555556,44.38537955555555 52.086520888888884,44.614912 51.91889656794463,44.48264352962831 51.96997688888889,44.73303466666667 52.220444444444446,44.74390044444444 52.308743111111106,44.862023111111114 52.33580088888888,44.70913422222222 52.50192355555556,44.95802311111111 52.31802311111111,45.28474311111111 51.884842666666664,44.94478933333333 51.97747911111111,45.186766222222225 52.273578666666666,45.36395377777777 52.17955555555555,45.68928711111111 51.93619911111111,45.72029866666667 51.92632177777777,45.636344888888885 51.89195377777778,45.725632000000004 M50.819168473835894,44.5168230456517 50.88849066666667,44.481578666666664 50.852544,44.429823999999996 50.819168473835894,44.5168230456517 M50.852881044828884,44.42429021008842 50.882368,44.38933333333333 50.89935644444444,44.345088000000004 50.852881044828884,44.42429021008842 M51.51214556731462,45.36311329900368 51.51624533333334,45.36355555555556 51.51603302289519,45.36179120288404 51.51214556731462,45.36311329900368 M51.51976968309033,45.23422832137902 51.5705013787215,45.23963886013915 51.53619911111111,45.228245333333334 51.54706488888889,45.16306488888889 51.54427968210783,45.155038939146976 51.51976968309033,45.23422832137902 M51.639698160670505,45.07785319895537 51.657479111111115,45.071800888888895 51.67604622222222,45.01076622222222 51.65531022222223,45.003456 51.639698160670505,45.07785319895537 M51.63321339830171,45.04966826868539 51.57115733333333,45.07022222222222 51.54311111111111,45.073187555555556 51.54441743036609,45.1238413909866 51.59190044444444,45.094122666666664 51.63321339830171,45.04966826868539 M51.41098888344968,44.47979910211938 51.39555555555556,44.521088000000006 51.387456,44.553088 51.38945539881342,44.56875675804796 51.39298844444444,44.54656711111111 51.40642133333333,44.51693511111111 51.40365511111111,44.50646755555556 51.41098888344968,44.47979910211938 M51.391407917967626,44.58405813264428 51.39164005555555,44.58587733333333 51.39521616597925,44.58587733333333 51.391407917967626,44.58405813264428 M51.87621032181999,44.43771188227159 51.83644444444444,44.39585422222222 51.81770844420998,44.38808044451738 51.801479111111114,44.43081244444444 51.837632,44.463601777777775 51.87621032181999,44.43771188227159 M50.543202806144656,44.54759861302422 50.54084266666666,44.445824 50.203455999999996,44.42331022222223 50.544,44.21629866666667 50.675555555555555,44.456689777777775 50.56355555555556,44.56711111111111 50.70301155555555,44.584689777777776 50.32157866666667,44.96770133333333 50.374912,45.02953244444445 50.471701333333336,44.946176 50.600689777777774,45.02676622222222 50.69787733333334,44.905287111111114 50.96829866666667,45.007210666666666 51.119409777777776,44.92602311111111 51.00464355555555,45.115256888888894 50.722766222222226,45.25688888888889 50.669632,45.64780088888888 51.036046222222225,45.82557866666666 51.23950933333333,46.144398222222215 51.16029866666667,46.164743111111115 50.98528711111111,45.86864355555556 50.908842666666665,45.837632 50.846222222222224,46.01876622222222 50.69155555555555,45.776 50.385976888888884,45.69718755555555 50.40533333333333,45.60078933333333 50.26567822222222,45.684344888888894 50.255601777777784,45.54034488888889 50.409088000000004,45.52513422222223 50.301632000000005,45.358812444444446 50.41955555555556,45.306666666666665 50.33540977777778,45.13007644444444 49.981824,44.97026844444444 49.711210666666666,44.55822222222222 49.56543288888889,44.68997688888889 49.57787733333333,44.40809955555555 49.440000000000005,44.387157333333334 49.326620444444444,44.09896533333333 49.164452732251355,44.098507151026254 49.277632000000004,44.05175466666667 49.14666666666666,43.861333333333334 49.26064355555555,43.88029866666667 49.54153244444444,44.341731555555555 49.640888888888895,44.23131022222222 49.57570133333333,43.965824 49.66893511111111,44.041088 49.628842666666664,44.361087999999995 49.80918755555555,44.322368 50.094222222222214,44.65521066666667 50.543202806144656,44.54759861302422 M49.83086345737511,44.64057589057936 49.83178059628419,44.64206836543723 49.83111111111111,44.64059022222222 49.83086345737511,44.64057589057936 M53.33028977777778,48.23684266666667 53.32957866666667,48.23684266666667 53.32957866666667,48.23613155555555 53.33028977777778,48.23613155555555 53.33028977777778,48.23684266666667 M53.930268444444444,48.48888888888889 53.89590044444445,48.353578666666664 53.78370133333333,48.371157333333336 53.84731022222222,48.15229866666667 54.237233777777774,48.079409777777784 53.98222222222222,48.39585422222222 54.33797688888889,48.317631999999996 54.17185422222222,48.395456 54.17422222222223,48.573823999999995 53.930268444444444,48.48888888888889 M54.118712888888886,48.114368000000006 54.06202311111111,48.114368000000006 54.06202311111111,47.90913422222222 54.118712888888886,47.90913422222222 54.118712888888886,48.114368000000006 M58.41995377777778,50.14735644444445 58.425728301278724,49.99321446257316 58.296490666666664,49.936 58.33580088888888,50.70281244444445 58.12997688888888,50.69333333333333 58.091064888888894,50.59634488888889 57.81807644444444,50.67456711111111 57.782912,50.548344888888884 57.998222222222225,50.34824533333334 58.262712888888885,49.744398222222216 58.12424533333333,49.66419911111112 58.034176,49.37007644444444 57.95535644444444,49.529087999999994 57.946076444444444,49.25313422222222 58.091113962906135,49.188022520743914 57.83822222222222,49.25945599999999 57.90301155555555,49.20592355555556 57.60039822222222,49.023800888888886 57.70212266666666,48.939064888888886 57.538368,48.85609955555556 57.41728711111111,48.373333333333335 57.56167822222223,48.09244444444444 57.52612266666666,48.23664355555555 57.61165511111111,48.26923377777777 57.70468977777778,48.267064888888896 57.71911111111111,48.100544 58,48.15407644444444 57.90913422222222,48.308145777777774 57.98360177777778,48.326912 58.08592355555555,48.23684266666667 57.899655111111116,48.08395377777778 58.17462044444444,48.07131022222222 58.31604622222222,48.199900444444445 58.25339520039468,48.28055544569619 58.751517782025765,48.83503769077388 58.890624711111116,49.33510968888889 59.43749973333333,49.892224 59.67968782222222,50.43733262222222 60.509432888888895,51.01392355555556 60.5410149086516,50.855757406083505 60.42286782561649,50.792480493692125 60.529797037438705,50.81451886725006 60.716046222222225,51.10143288888889 60.99377777777777,51.221731555555564 60.602666666666664,51.42459022222223 60.557034666666674,51.244643555555555 60.181762119516414,51.084896425765976 60.059655111111105,51.35624533333333 59.751310222222216,51.06864355555555 59.22816908019685,50.83534098407495 59.033479111111106,51.12098844444445 58.36404622222222,51.336099555555556 58.99614577777778,51.076145777777775 58.51140977777778,50.719011555555554 58.52777648137468,50.15561958825105 58.41995377777778,50.14735644444445 M58.13165699170558,49.16253907249821 58.162176,49.08839822222223 58.13452088888889,49.099455999999996 58.13165699170558,49.16253907249821 M58.170730456508025,49.061241608635726 58.17499935945745,49.05236088932913 58.17343288888888,49.05363200000001 58.170730456508025,49.061241608635726 M58.188577821269114,49.00838455416135 58.194368000000004,48.989632 58.18864355555556,48.98331022222222 58.18607644444444,48.978368 58.18547911111111,48.97125688888889 58.17264355555555,48.968099555555554 58.13432177777778,48.970666666666666 58.126734971923206,48.96723134568395 58.13293511111112,48.97343288888889 58.1831111111111,49.00681244444444 58.188577821269114,49.00838455416135 M58.06214980840461,48.95303887191939 58.015409777777776,48.95308800000001 58.00612266666667,48.943601777777786 58.00395377777778,48.93807644444444 57.96538883550368,48.89978467534806 57.97175466666666,48.913777777777774 57.978268444444446,48.917731555555555 57.99802311111111,48.941632 58.00474311111111,48.94557866666666 58.012046222222224,48.95288888888889 58.036544,48.95862044444445 58.03970133333333,48.957632000000004 58.05155555555556,48.959999999999994 58.06214980840461,48.95303887191939 M57.949939575674165,48.842914538967825 57.952789333333335,48.838712888888885 57.960490666666665,48.834567111111106 57.98084266666667,48.82804622222222 57.980444444444444,48.804935111111114 58.002567111111105,48.792490666666666 58.011455999999995,48.770368000000005 58.036743111111115,48.777877333333336 58.06597688888889,48.722965333333335 58.10686577777778,48.73264355555556 58.13570133333334,48.731456 58.193187555555554,48.73935644444445 58.16315733333333,48.54340977777778 58.16375466666666,48.49560177777778 58.15822222222222,48.48078933333333 58.117333333333335,48.43575466666667 58.08059022222223,48.47842133333334 58.043064888888885,48.42192355555556 58.00137955555556,48.377479111111114 57.96957866666667,48.443854222222214 57.90064355555556,48.38222222222222 57.93265358393781,48.37199374257446 57.859157333333336,48.35022222222223 57.853632,48.37175466666667 57.853823999999996,48.40355555555555 57.79555555555556,48.41777777777778 57.76256711111111,48.411256888888886 57.72009955555556,48.44523377777777 57.70706488888889,48.47703466666666 57.67604622222222,48.49501155555556 57.64404622222223,48.509432888888895 57.62370133333334,48.571456 57.647210666666666,48.596543999999994 57.652935111111105,48.61471288888889 57.65234488888889,48.62814577777778 57.72246755555555,48.63170133333333 57.73234488888889,48.621233777777775 57.73846755555556,48.61096533333334 57.753088000000005,48.625187555555556 57.765532444444446,48.627356444444445 57.786467555555554,48.625976888888886 57.81570133333334,48.615509333333335 57.84059022222222,48.59871288888888 57.85876622222222,48.59693511111111 57.85896533333334,48.622421333333335 57.85619911111111,48.64987733333333 57.87713422222222,48.664490666666666 57.87871288888889,48.682268444444446 57.88365511111111,48.68997688888889 57.90715733333333,48.707953777777774 57.93955555555556,48.74192355555555 57.94211845178616,48.799756725509624 57.961088,48.8 57.97728711111111,48.80315733333334 57.94646755555555,48.830222222222226 57.949939575674165,48.842914538967825 M57.86563726276596,48.85980615283688 57.867456,48.865578666666664 57.87614577777777,48.87624533333333 57.87496533333333,48.88573155555555 57.88286577777777,48.89343288888889 57.88254223804413,48.89731828046495 57.88424533333333,48.896398222222224 57.887409777777776,48.884145777777775 57.86563726276596,48.85980615283688 M58.2588033593417,49.96591728581188 58.235395473066326,49.962679273227394 58.04022513207328,50.38524523103057 58.03970133333333,50.39604622222222 58.04464355555556,50.40256711111111 58.070520888888886,50.46242133333333 58.098175999999995,50.453923555555555 58.11101155555556,50.45846755555556 58.11852088888889,50.45728711111111 58.12147911111111,50.45511111111111 58.17086577777778,50.458076444444444 58.19693511111111,50.416789333333334 58.198712888888885,50.410666666666664 58.20662044444445,50.41106488888889 58.219256888888886,50.40197688888889 58.22775466666666,50.394865777777774 58.23802311111111,50.38222222222222 58.24044696490431,50.37645726859424 58.22715733333333,50.394076444444444 58.22281244444444,50.396842666666664 58.19022222222222,50.40434488888889 58.17501155555556,50.39822222222222 58.16809955555556,50.384398222222224 58.15506488888889,50.32553244444444 58.17422222222223,50.26567822222222 58.20424533333334,50.23664355555555 58.226176,50.242176 58.25184976293359,50.266800930296476 58.2588033593417,49.96591728581188 M58.24424005886486,50.37142844675289 58.249479111111114,50.36937955555556 58.249595859812686,50.36432781358526 58.24424005886486,50.37142844675289 M58.74567949283222,49.06752976290559 58.56481374905072,48.786452278222804 58.532935111111115,48.78577777777778 58.47071288888889,48.788935111111115 58.462332047097384,48.8006009279472 58.457088,48.811256888888884 58.555456,48.88493511111111 58.74567949283222,49.06752976290559 M58.446563117655835,48.82487065330921 58.411854222222225,48.851754666666665 58.39190044444444,48.861824 58.381824,48.880398222222226 58.41026844444444,48.92642133333333 58.455900444444445,48.94874311111111 58.461432888888886,48.971455999999996 58.47684266666666,48.99062044444444 58.49698844444445,48.98034488888889 58.5068708026487,48.96462718798078 58.446563117655835,48.82487065330921 M58.614861767105076,49.214884563471905 58.60009955555556,49.241877333333335 58.592199111111114,49.27940977777778 58.67505025964062,49.35436488252025 58.614861767105076,49.214884563471905 M60.58998028223792,50.95906778978355 60.590958592318394,50.9698960979648 60.59239822222222,50.96493511111112 60.58998028223792,50.95906778978355 M58.26011508798947,49.90915849899822 58.256354551789265,49.917300487033934 58.25997466090741,49.91523480969466 58.26011508798947,49.90915849899822 M58.38215873290174,49.50464829034914 58.38735644444444,49.49886577777778 58.39209955555555,49.49688888888889 58.395655111111104,49.503409777777776 58.413632,49.51131022222223 58.463601777777775,49.474368 58.48296533333333,49.515854222222224 58.50067910907985,49.538077466901115 58.49695047492734,49.453102856845724 58.451754666666666,49.42202311111111 58.43713422222223,49.40997688888889 58.41501155555555,49.343011555555556 58.40078933333333,49.325233777777775 58.386176,49.28553244444445 58.38024533333333,49.26281244444444 58.37787733333334,49.24246755555556 58.39299541337593,49.202511836295315 58.36207644444444,49.20790044444445 58.35575466666667,49.284544 58.38380088888889,49.337088 58.36424533333333,49.36553244444445 58.30973155555555,49.384298666666666 58.286620444444445,49.32839822222222 58.27337955555556,49.31377777777777 58.270812444444445,49.31278933333333 58.253432888888895,49.31832177777778 58.21195377777778,49.32701155555555 58.206232099563344,49.33127585266596 58.38215873290174,49.50464829034914 M58.49076356862762,49.31210485898286 58.48798559353453,49.24879552354696 58.48098844444444,49.25945599999999 58.46518755555555,49.27822222222222 58.49076356862762,49.31210485898286 M58.46241782175443,49.199946407609815 58.44799999999999,49.19268977777778 58.437663936663085,49.20053004431888 58.46241782175443,49.199946407609815 M58.434907799320335,49.2005950273679 58.42666666666666,49.19664355555556 58.41831397093601,49.19809927694074 58.42666666666666,49.20078933333333 58.434907799320335,49.2005950273679 M60.69696601592326,51.12866774245053 60.69511111111112,51.124344888888885 60.68804544479127,51.1258707428996 60.69696601592326,51.12866774245053 M60.687504132253906,51.12570101711618 60.669632,51.11229866666667 60.64950136887532,51.113785444611764 60.687504132253906,51.12570101711618 M59.01350019525604,50.58542742828985 59.01951450099926,50.51363033127862 59.00365511111111,50.542023111111114 59.008,50.558421333333335 59.013532444444444,50.56592355555555 59.01350019525604,50.58542742828985 M59.02371954186341,50.46343173151516 59.038812444444446,50.28325688888889 59.05966963142554,50.06238229329658 58.94024533333334,49.99842133333334 58.94478933333333,49.979456 58.85709316743869,49.77622962427581 58.84839822222222,49.78547911111111 58.822122666666665,49.84434488888889 58.81876622222223,49.846911999999996 58.816590222222224,49.846911999999996 58.79842133333334,49.89807644444445 58.795472652373206,49.911961500335465 58.81224533333333,49.92849066666667 58.962272386297315,50.307996196094976 58.97737955555556,50.314076444444446 58.99575466666666,50.308145777777774 59.02814577777778,50.28937955555555 59.01925688888889,50.30715733333333 58.98409955555555,50.36147911111111 58.987850013936125,50.37269686791923 58.99298844444444,50.377287111111116 58.992544224272,50.38457125152918 59.02371954186341,50.46343173151516 M58.798528126492094,49.640511478627175 58.79603358172939,49.64151620064913 58.80167412265279,49.647801984332396 58.798528126492094,49.640511478627175 M58.553721312792106,50.19690962990662 58.575011555555555,50.70024533333333 58.59259022222223,50.722367999999996 58.67733333333334,50.80098844444444 58.70123377777777,50.80414577777778 58.70814577777777,50.80711111111111 58.72592355555556,50.80750933333333 58.73915733333333,50.74311111111111 58.782023111111116,50.74745599999999 58.797824,50.756544 58.804935111111114,50.76404622222222 58.855900444444444,50.779256888888895 58.862620444444445,50.78715733333334 58.925824,50.795256888888886 58.968888888888884,50.78755555555556 58.9872355361334,50.78301662341516 58.97995377777778,50.77767822222222 58.97106488888889,50.783601777777776 58.94893511111111,50.777877333333336 58.94281244444444,50.78715733333334 58.93471288888889,50.788935111111115 58.925432888888885,50.78775466666667 58.868935111111114,50.75062044444444 58.840689777777776,50.718222222222224 58.813632,50.70380088888889 58.80118755555556,50.70577777777778 58.779455999999996,50.68187733333333 58.793678222222226,50.66093511111111 58.806321777777775,50.598912 58.553721312792106,50.19690962990662 M59.04884645196431,50.80949013294184 59.087011555555556,50.818176 59.107754666666665,50.820145777777775 59.11371205864885,50.82212493705804 59.10262044444445,50.81481244444445 59.084245333333335,50.815210666666665 59.063701333333334,50.806912000000004 59.05303466666666,50.80573155555555 59.04884645196431,50.80949013294184 M58.61286967507299,49.73200964937355 58.61886577777777,49.72484266666667 58.63862044444444,49.71002311111111 58.63879404628087,49.70484720450655 58.62004622222222,49.71239822222223 58.630912,49.680988444444445 58.59745626479939,49.44203335033851 58.566911999999995,49.45777777777778 58.551509333333335,49.47160177777778 58.53392355555555,49.467655111111114 58.52269705220377,49.46344603345846 58.53062868686232,49.650962679207694 58.61286967507299,49.73200964937355 M58.59020566803461,49.390246503573294 58.57678933333333,49.29442133333333 58.515806173728734,49.30053454376837 58.517548945138394,49.34173647289328 58.526023111111115,49.351111111111116 58.52207644444445,49.398122666666666 58.547356444444446,49.41886577777778 58.59020566803461,49.390246503573294 M58.49000252577788,48.67019062455678 58.24414614882047,48.28811334124382 58.22893511111111,48.30301155555555 58.22715733333333,48.31032177777778 58.22953244444444,48.37293511111111 58.21392355555556,48.39506488888889 58.20622222222222,48.44642133333333 58.189632,48.47387733333334 58.19140977777778,48.524046222222225 58.29728711111111,48.61452088888889 58.32533333333333,48.66271288888889 58.29392355555556,48.688 58.26765511111111,48.69056711111111 58.232298666666665,48.70459022222222 58.209578666666665,48.76167822222222 58.26686577777778,48.79763199999999 58.284444444444446,48.79822222222222 58.35180088888889,48.78518755555555 58.36681244444444,48.78715733333334 58.37965511111111,48.794467555555556 58.42725688888889,48.74864355555555 58.45570133333333,48.71703466666667 58.49000252577788,48.67019062455678 M58.502153229189965,49.571672283772045 58.46934501033989,49.590568751425074 58.50450269477249,49.625215998051175 58.502153229189965,49.571672283772045 M60.38700936056949,50.77327550874472 60.21399863242247,50.699003005759664 60.33593742222222,50.696041244444444 60.38700936056949,50.77327550874472 M53.748543999999995,50.39802311111111 53.654911999999996,50.323754666666666 53.87812266666666,50.33382399999999 54.07604622222222,50.51555555555555 54.346666666666664,50.21333333333333 54.38004622222223,50.30557866666667 54.23901155555556,50.656 53.748543999999995,50.39802311111111 M57.08325688888889,51.380935111111114 56.93747911111112,50.97540977777778 56.73363200000001,50.928199111111105 56.873678222222225,50.84503466666667 57.014122666666665,50.96849066666667 57.213824,50.77274311111111 57.513088,51.06765511111111 57.66617599999999,50.921877333333335 57.68809955555556,51.03842133333333 57.55121066666666,51.08997688888889 57.66814577777778,51.184789333333335 57.90340977777778,51.292842666666665 57.96918755555556,51.225287111111115 57.90557866666667,51.669333333333334 57.739456000000004,51.63259022222222 57.68256711111111,51.769088 57.27684266666666,51.40404622222222 57.22429866666667,51.45856711111111 57.20157866666666,51.329187555555556 57.08325688888889,51.380935111111114 M53.842766222222224,50.256988444444445 53.89590044444445,50.13076622222223 53.97293511111111,50.16592355555555 53.842766222222224,50.256988444444445 M54.27595377777777,50.78577777777778 54.306176,50.65481244444444 54.43773155555556,50.80414577777778 54.518712888888885,50.592199111111114 54.64177777777778,50.64750933333334 54.46222222222222,50.924643555555555 54.658965333333335,50.89303466666667 54.89963714971698,51.13121486687669 54.39133210770263,50.944784700146776 54.27595377777777,50.78577777777778 M57.43209955555556,50.80868977777778 57.60355555555555,50.70755555555556 57.62587733333333,50.57540977777777 57.685731555555556,50.72 57.43209955555556,50.80868977777778 M57.394368,50.87407644444444 57.367900444444444,50.58824533333333 57.42874311111111,50.57343288888888 57.394368,50.87407644444444 M61.45639822222223,51.208298666666664 61.136398222222226,51.05323377777778 61.545088,51.11407644444444 61.77935644444444,51.01471288888889 61.63337955555556,51.223310222222224 61.45639822222223,51.208298666666664 M56.89935644444444,50.460842666666665 56.97402311111111,50.369187555555555 56.95723377777777,50.46321066666666 56.89935644444444,50.460842666666665 M57.53777777777778,50.35318755555555 57.66537955555555,50.08493511111111 57.404444444444444,49.89115733333334 57.61737955555555,49.924544 57.796145777777774,50.12286577777778 57.53777777777778,50.35318755555555 M57.25807644444445,50.394076444444444 57.37659022222222,50.044444444444444 57.30567822222223,50.08019911111111 57.39377777777777,50.38537955555555 57.25807644444445,50.394076444444444Z\"/>",geojson:{type:"Feature",geometry:{type:"MultiPolygon",coordinates:[[[[-105.63472,22.57222],[-105.60361,22.69889],[-105.8425,22.73417],[-105.68111,22.87083],[-105.45806,22.66083],[-105.36806,23.14556],[-105.2,23.2875],[-105.48167,23.35194],[-105.29194,23.43306],[-105.36028,23.77833],[-105.15389,23.38694],[-104.83194,23.20222],[-104.91611,23.12583],[-105.08472,23.325],[-105.17833,23.20944],[-105.00472,22.84194],[-105.27944,22.60972],[-105.05889,22.60611],[-104.79444,23.22778],[-104.5662766905865,23.266538402278986],[-104.66972,24.02361],[-104.54004672288815,23.277419252917355],[-104.39556,23.47306],[-104.29389,23.33639],[-103.92306,23.58306],[-104.27056,23.1825],[-104.22417,22.93333],[-103.48472,22.88611],[-104.19028,22.54917],[-104.4275,22.61667],[-104.38278,22.21194],[-104.55639,21.70639],[-104.32611,21.3075],[-104.56694,21.81944],[-104.92861,21.86861],[-105.14028,21.72028],[-105.11306,21.42889],[-105.60387477201527,21.7330495532284],[-105.64722,22.21944],[-105.5725,21.90528],[-105.11194,22.28556],[-105.03972,22.08361],[-104.81314271963825,22.049696760198717],[-105.11944,22.46694],[-105.23417,22.31167],[-105.45722,22.59667],[-105.63472,22.57222]],[[-104.65167,22.64833],[-104.71333,22.58611],[-104.5725495118472,22.58328449759062],[-104.65167,22.64833]],[[-104.88722,22.61],[-104.815,22.60806],[-104.81213861710147,22.616613277828197],[-104.88722,22.61]],[[-104.7129792401024,23.316211060655736],[-104.72722,23.29139],[-104.73479098270957,23.212322860520313],[-104.72,23.20806],[-104.7129792401024,23.316211060655736]]],[[[-112.84667,30.27139],[-112.41111,31.42694],[-113.025,31.70806],[-112.85444,31.86139],[-111.97694,31.54667],[-112.26889,31.28611],[-111.83528,30.71361],[-112.15917,30.71556],[-112.44444,30.95694],[-112.84667,30.27139]]],[[[-108.54056,28.7525],[-109.04778,28.25417],[-108.55639,29.14694],[-108.63056,29.4325],[-108.35444,29.90389],[-108.58611,29.21194],[-108.14139,29.19],[-108.47944,29.15889],[-108.54056,28.7525]]],[[[-108.45472,28.44472],[-108.45944,28.70278],[-107.83056,28.95333],[-108.14806,28.56806],[-108.365,28.56917],[-108.25278,28.28833],[-108.45472,28.44472]]],[[[-108.91806,28.36556],[-108.54028,28.43889],[-108.62806,28.35],[-108.91806,28.36556]]],[[[-107.02694,25.69833],[-107.265,26.13861],[-107.69361,26.17],[-107.55966557069503,26.38031359430955],[-107.72833,26.24028],[-108.00806,26.43278],[-107.9,26.60556],[-108.01778,26.79917],[-107.80334207253189,27.09306],[-108.00444,26.89111],[-108.16833,26.91806],[-108.2125,27.14583],[-108.58222,27.10056],[-108.53056,27.63583],[-108.66583,27.5725],[-109.04778,28.25417],[-108.675,28.03889],[-108.52778,28.20139],[-108.55194,27.87556],[-108.17806,27.99889],[-107.94861,27.71667],[-107.97,27.93694],[-107.86528,27.91056],[-107.92889,27.58667],[-107.74472,27.49444],[-107.5475,27.65389],[-107.23389,27.58611],[-107.86056,27.64861],[-107.66889,28.07389],[-107.78361,28.27861],[-107.93028,28.15333],[-108.04944,28.24111],[-107.75361,28.38528],[-107.86194,28.52472],[-107.58222,28.59306],[-107.49111,28.895],[-107.40167,28.52111],[-107.21611,28.54],[-107.02056,28.84722],[-107.10444,29.14111],[-106.84028,28.92833],[-106.87,28.56083],[-106.59444,28.45333],[-107.18667,28.35278],[-107.37556,28.12028],[-107.17333,27.925],[-106.74111,28.04444],[-106.56528,27.83806],[-106.88444,27.77806],[-106.72861,27.52222],[-106.51389,27.50139],[-106.88944,27.58306],[-106.75333,27.26028],[-106.98905170132787,27.446282536460192],[-106.91722,27.09417],[-106.565,27.07889],[-106.44083,26.91278],[-106.40278,27.12778],[-106.16917,26.77778],[-106.42778,26.31833],[-107.03694,26.79639],[-106.90667,26.45611],[-106.49028,26.20694],[-106.6225,25.74944],[-106.96472,25.70583],[-106.97861,25.82389],[-107.02694,25.69833]],[[-108.53554433366827,27.398217592052298],[-108.43806,27.44778],[-108.48861,27.52056],[-108.53554433366827,27.398217592052298]],[[-108.48813603070938,27.528341892063157],[-108.44667,27.5775],[-108.42278,27.63972],[-108.48813603070938,27.528341892063157]],[[-107.56104529596382,26.208121923276074],[-107.55528,26.2075],[-107.55557856155363,26.209981120944317],[-107.56104529596382,26.208121923276074]],[[-107.55032388315422,26.389366423060746],[-107.47898243617288,26.38175785292932],[-107.52722,26.39778],[-107.51194,26.48944],[-107.51585669703587,26.50072649182457],[-107.55032388315422,26.389366423060746]],[[-107.3816744615571,26.609268938969016],[-107.35667,26.61778],[-107.33056,26.70361],[-107.35972,26.71389],[-107.3816744615571,26.609268938969016]],[[-107.39079365863822,26.64890399716117],[-107.47806,26.62],[-107.5175,26.61583],[-107.51566298854769,26.544598043925088],[-107.44889,26.58639],[-107.39079365863822,26.64890399716117]],[[-107.70329688264889,27.45028251264462],[-107.725,27.39222],[-107.73639,27.34722],[-107.73357834541864,27.32518580899505],[-107.72861,27.35639],[-107.70972,27.39806],[-107.71361,27.41278],[-107.70329688264889,27.45028251264462]],[[-107.73083261535803,27.303668250968986],[-107.730506171875,27.30111],[-107.72547726659168,27.30111],[-107.73083261535803,27.303668250968986]],[[-107.04907923494063,27.509467665555572],[-107.105,27.56833],[-107.13134750032972,27.579261874897433],[-107.15417,27.51917],[-107.10333,27.47306],[-107.04907923494063,27.509467665555572]]],[[[-108.92362105385908,27.354939450434692],[-108.92694,27.49806],[-109.40139,27.52972],[-108.9225,27.82083],[-108.7375,27.48278],[-108.895,27.3275],[-108.69889,27.30278],[-109.23528,26.76417],[-109.16028,26.67722],[-109.02417,26.79444],[-108.84278,26.68111],[-108.70611,26.85194],[-108.32583,26.70861],[-108.11333,26.82278],[-108.27472,26.55667],[-108.67111,26.3575],[-108.74583,25.80778],[-108.23056,25.55778],[-107.94444,25.10944],[-108.05583,25.08083],[-108.30194,25.49722],[-108.40944,25.54083],[-108.4975,25.28611],[-108.715,25.6275],[-109.14472,25.73833],[-109.1175,25.87389],[-109.31389,25.75639],[-109.32806,25.95889],[-109.11222,25.98028],[-109.26333,26.21417],[-109.0975,26.2875],[-109.21583,26.53583],[-109.71306,26.76056],[-110.09361,27.34],[-110.29861,27.15472],[-110.28111,27.55111],[-110.475,27.58056],[-110.63444,27.98583],[-110.86248834527153,27.98647431886933],[-110.70333,28.05222],[-110.8875,28.32],[-110.72722,28.29333],[-110.33222,27.64444],[-110.1925,27.79972],[-110.28417,28.17306],[-110.15306,28.06722],[-110.20944,27.61722],[-109.95583,27.67167],[-109.555,27.20361],[-108.92362105385908,27.354939450434692]],[[-109.92534826306625,27.224190153872772],[-109.92405853647536,27.222091361103896],[-109.925,27.22417],[-109.92534826306625,27.224190153872772]]],[[[-105.00428,22.16694],[-105.00528,22.16694],[-105.00528,22.16794],[-105.00428,22.16794],[-105.00428,22.16694]]],[[[-104.16056,21.8125],[-104.20889,22.00278],[-104.36667,21.97806],[-104.27722,22.28583],[-103.72889,22.38833],[-104.0875,21.94333],[-103.58722,22.05333],[-103.82083,21.94389],[-103.8175,21.69306],[-104.16056,21.8125]]],[[[-103.89556,22.33917],[-103.97528,22.33917],[-103.97528,22.62778],[-103.89556,22.62778],[-103.89556,22.33917]]],[[[-97.84694,19.48028],[-97.8388195763268,19.697042162006497],[-98.02056,19.7775],[-97.96528,18.69917],[-98.25472,18.7125],[-98.30944,18.84889],[-98.69333,18.73889],[-98.74278,18.91639],[-98.44,19.19778],[-98.06806,20.04694],[-98.26278,20.15972],[-98.38944,20.57333],[-98.50028,20.34972],[-98.51333,20.73778],[-98.30937098966325,20.82934333020387],[-98.665,20.72889],[-98.57389,20.80417],[-98.99944,21.06028],[-98.85639,21.17944],[-99.08667,21.29611],[-99.25694,21.975],[-99.05389,22.37],[-99.10389,22.16722],[-98.98361,22.12139],[-98.85278,22.12444],[-98.8325,22.35861],[-98.4375,22.28333],[-98.56528,22.06667],[-98.46056,22.04028],[-98.31667,22.16694],[-98.57861,22.38194],[-98.19194,22.39972],[-97.99306,22.21889],[-98.08116299944498,22.105468904489737],[-97.38067811902627,21.325728247349236],[-97.185059,20.622502],[-96.416016,19.83906],[-96.075439,19.072501],[-94.90861,18.26167],[-94.8641977847087,18.484091147695075],[-95.0303421202268,18.573074305745457],[-94.87997291610182,18.542082842929602],[-94.61806,18.13861],[-94.2275,17.96944],[-94.7775,17.68417],[-94.84167,17.93722],[-95.36939701943004,18.161864401266595],[-95.54111,17.78028],[-95.97472,18.18472],[-96.71038723097318,18.5128017411446],[-96.98417,18.11111],[-97.92556,17.80861],[-97.03667,18.17417],[-97.71833,18.67639],[-97.69531432306685,19.468659954021955],[-97.84694,19.48028]],[[-98.25235735541402,20.865179429299385],[-98.20944,20.96944],[-98.24833,20.95389],[-98.25235735541402,20.865179429299385]],[[-98.19741029553559,21.00762898785601],[-98.19140715076296,21.02011749938091],[-98.19361,21.01833],[-98.19741029553559,21.00762898785601]],[[-98.17231243884031,21.0819592207106],[-98.16417,21.10833],[-98.17222,21.11722],[-98.17583,21.12417],[-98.17667,21.13417],[-98.19472,21.13861],[-98.24861,21.135],[-98.25927894573299,21.139830920131942],[-98.25056,21.13111],[-98.18,21.08417],[-98.17231243884031,21.0819592207106]],[[-98.35010183193101,21.159789086363364],[-98.41583,21.15972],[-98.42889,21.17306],[-98.43194,21.18083],[-98.48617195007294,21.234677800291788],[-98.47722,21.215],[-98.46806,21.20944],[-98.44028,21.17583],[-98.43083,21.17028],[-98.42056,21.16],[-98.38611,21.15194],[-98.38167,21.15333],[-98.365,21.15],[-98.35010183193101,21.159789086363364]],[[-98.5078974717082,21.3146514295765],[-98.50389,21.32056],[-98.49306,21.32639],[-98.46444,21.33556],[-98.465,21.36806],[-98.43389,21.38556],[-98.42139,21.41667],[-98.38583,21.40611],[-98.34472,21.48333],[-98.28722,21.46972],[-98.24667,21.47139],[-98.16583,21.46028],[-98.20806,21.73583],[-98.20722,21.80306],[-98.215,21.82389],[-98.2725,21.88722],[-98.32417,21.82722],[-98.37694,21.90667],[-98.43556,21.96917],[-98.48028,21.87583],[-98.57722,21.9625],[-98.53220589758746,21.97688379950466],[-98.63556,22.0075],[-98.64333,21.97722],[-98.64306,21.9325],[-98.725,21.9125],[-98.77139,21.92167],[-98.83111,21.87389],[-98.84944,21.82917],[-98.89306,21.80389],[-98.93806,21.78361],[-98.96667,21.69639],[-98.93361,21.66111],[-98.92556,21.63556],[-98.92639,21.61667],[-98.82778,21.61167],[-98.81389,21.62639],[-98.80528,21.64083],[-98.78472,21.62083],[-98.76722,21.61778],[-98.73778,21.61972],[-98.69667,21.63444],[-98.66167,21.65806],[-98.63611,21.66056],[-98.63583,21.62472],[-98.63972,21.58611],[-98.61028,21.56556],[-98.60806,21.54056],[-98.60111,21.52972],[-98.56806,21.50444],[-98.5225,21.45667],[-98.51889592717572,21.3753421047521],[-98.49222,21.375],[-98.46944,21.37056],[-98.51278,21.3325],[-98.5078974717082,21.3146514295765]],[[-98.62644759923538,21.290897597573135],[-98.62389,21.28278],[-98.61167,21.26778],[-98.61333,21.25444],[-98.60222,21.24361],[-98.60267497775044,21.23814616809616],[-98.60028,21.23944],[-98.59583,21.25667],[-98.62644759923538,21.290897597573135]],[[-98.07355777592574,19.735428816827056],[-98.10647511600048,19.739982272023973],[-98.38093340802195,19.145748893863267],[-98.38167,19.13056],[-98.37472,19.12139],[-98.33833,19.03722],[-98.29944,19.04917],[-98.28139,19.04278],[-98.27083,19.04444],[-98.26667,19.0475],[-98.19722,19.04333],[-98.16056,19.10139],[-98.15806,19.11],[-98.14694,19.10944],[-98.12917,19.12222],[-98.11722,19.13222],[-98.10278,19.15],[-98.09937145560332,19.158106966039362],[-98.11806,19.13333],[-98.12417,19.12944],[-98.17,19.11889],[-98.19139,19.1275],[-98.20111,19.14694],[-98.21944,19.22972],[-98.1925,19.31389],[-98.15028,19.35472],[-98.11944,19.34694],[-98.08333627087464,19.31231119177058],[-98.07355777592574,19.735428816827056]],[[-98.09403741722129,19.16517874675375],[-98.08667,19.16806],[-98.0865058221384,19.175164012145732],[-98.09403741722129,19.16517874675375]],[[-97.3888882132047,20.998786270914014],[-97.64323066539743,21.39405148374918],[-97.68806,21.395],[-97.77556,21.39056],[-97.7873455587693,21.374154945074253],[-97.79472,21.35917],[-97.65639,21.25556],[-97.3888882132047,20.998786270914014]],[[-97.80952061579649,21.340025643783918],[-97.85833,21.30222],[-97.88639,21.28806],[-97.90056,21.26194],[-97.86056,21.19722],[-97.79639,21.16583],[-97.78861,21.13389],[-97.76694,21.10694],[-97.73861,21.12139],[-97.72471293377527,21.14349301690202],[-97.80952061579649,21.340025643783918]],[[-97.57285064000848,20.791568582617625],[-97.59361,20.75361],[-97.60472,20.70083],[-97.48821057238038,20.5954243839559],[-97.57285064000848,20.791568582617625]],[[-94.79534022810293,18.33881092061688],[-94.79396447955226,18.323583612237005],[-94.79194,18.33056],[-94.79534022810293,18.33881092061688]],[[-98.07171315751481,19.815245860783754],[-98.07700141154635,19.803796190108528],[-98.07191063309895,19.806701048866888],[-98.07171315751481,19.815245860783754]],[[-97.90008928185692,20.384088341696533],[-97.89278,20.39222],[-97.88611,20.395],[-97.88111,20.38583],[-97.85583,20.37472],[-97.78556,20.42667],[-97.75833,20.36833],[-97.73342000285646,20.3370785621703],[-97.73866339463343,20.4565741075607],[-97.80222,20.50028],[-97.82278,20.51722],[-97.85389,20.61139],[-97.87389,20.63639],[-97.89444,20.69222],[-97.90278,20.72417],[-97.90611,20.75278],[-97.8848501999401,20.808967730209712],[-97.92833,20.80139],[-97.93722,20.69361],[-97.89778,20.61972],[-97.92528,20.57972],[-98.00194,20.55333],[-98.03444,20.63194],[-98.05306,20.6525],[-98.05667,20.65389],[-98.08111,20.64611],[-98.13944,20.63389],[-98.14748610998905,20.627893332188492],[-97.90008928185692,20.384088341696533]],[[-97.74736373161741,20.65485254205536],[-97.75127025909207,20.743881295012088],[-97.76111,20.72889],[-97.78333,20.7025],[-97.74736373161741,20.65485254205536]],[[-97.78722493815783,20.81257536429869],[-97.8075,20.82278],[-97.82203508906754,20.81175462517658],[-97.78722493815783,20.81257536429869]],[[-97.82591090720578,20.81166324276389],[-97.8375,20.81722],[-97.84924597837123,20.815172891802085],[-97.8375,20.81139],[-97.82591090720578,20.81166324276389]],[[-94.64489154010792,18.10031098717895],[-94.6475,18.10639],[-94.65743609326228,18.104244267797444],[-94.64489154010792,18.10031098717895]],[[-94.65819731401794,18.104482944680374],[-94.68333,18.12333],[-94.71163870001908,18.121239218514702],[-94.65819731401794,18.104482944680374]],[[-97.01226535042119,18.864242678967393],[-97.00380773296979,18.965207346639446],[-97.02611,18.92528],[-97.02,18.90222],[-97.01222,18.89167],[-97.01226535042119,18.864242678967393]],[[-96.99789439425459,19.03579912755681],[-96.97667,19.28917],[-96.94733958080784,19.59977490005168],[-97.11528,19.68972],[-97.10889,19.71639],[-97.23221273328934,20.002177090862155],[-97.24444,19.98917],[-97.28139,19.90639],[-97.28611,19.90278],[-97.28917,19.90278],[-97.31472,19.83083],[-97.31886658260018,19.811304140153254],[-97.29528,19.78806],[-97.0843044567694,19.25438034924145],[-97.06306,19.24583],[-97.03722,19.25417],[-96.99167,19.28056],[-97.00417,19.25556],[-97.05361,19.17917],[-97.04833591790232,19.16339502948858],[-97.04111,19.15694],[-97.0417346846175,19.14669667753709],[-96.99789439425459,19.03579912755681]],[[-97.31456982212049,20.193030733180542],[-97.31807777569304,20.191617842837154],[-97.31014576501951,20.18277845953257],[-97.31456982212049,20.193030733180542]],[[-97.6588294038861,19.410595832943805],[-97.62889,18.70278],[-97.60417,18.67167],[-97.485,18.56111],[-97.45139,18.55667],[-97.44167,18.5525],[-97.41667,18.55194],[-97.39806,18.6425],[-97.33778,18.63639],[-97.31556,18.62361],[-97.30556,18.61306],[-97.23389,18.59167],[-97.22444,18.58056],[-97.13556,18.56917],[-97.075,18.58],[-97.04920002731241,18.58638287332244],[-97.05944,18.59389],[-97.07194,18.58556],[-97.10306,18.59361],[-97.11167,18.58056],[-97.12306,18.57806],[-97.13611,18.57972],[-97.21556,18.63194],[-97.25528,18.6775],[-97.29333,18.69778],[-97.31083,18.695],[-97.34139,18.72861],[-97.32139,18.75806],[-97.30361,18.84528],[-97.6588294038861,19.410595832943805]],[[-96.9625596769252,18.549154500550543],[-96.90889,18.53694],[-96.87972,18.53417],[-96.87134241752506,18.531386807262116],[-96.88694,18.54167],[-96.91278,18.54111],[-96.94167,18.55278],[-96.95667,18.55444],[-96.9625596769252,18.549154500550543]],[[-97.5756520194286,20.064361430568436],[-97.56722,20.07444],[-97.53944,20.09528],[-97.53919587241752,20.102558618662673],[-97.56556,20.09194],[-97.55028,20.13611],[-97.59732712762586,20.472140601086473],[-97.64028,20.45],[-97.66194,20.43056],[-97.68667,20.43611],[-97.70245727033846,20.442029015449044],[-97.69130340909986,20.178333732364177],[-97.5756520194286,20.064361430568436]],[[-97.60752327932633,20.544965854350057],[-97.62639,20.67972],[-97.71214756819397,20.67112329782573],[-97.70969679589913,20.613183084993818],[-97.69778,20.6],[-97.70333,20.53389],[-97.66778,20.50472],[-97.60752327932633,20.544965854350057]],[[-97.74843394812486,21.55754443421703],[-98.09416947822122,22.094840613875878],[-98.11556,22.07389],[-98.11806,22.06361],[-98.11472,21.97556],[-98.13667,21.94444],[-98.1475,21.87222],[-98.17083,21.83361],[-98.16833,21.76306],[-98.01944,21.63583],[-97.98,21.56806],[-98.02417,21.5325],[-98.06111,21.52889],[-98.11083,21.50917],[-98.14278,21.42889],[-98.06222,21.37833],[-98.0375,21.3775],[-97.94278,21.39583],[-97.92167,21.39306],[-97.90361,21.38278],[-97.83667,21.44722],[-97.79667,21.49167],[-97.74843394812486,21.55754443421703]],[[-97.73134702145161,20.28983585094556],[-97.77748357920953,20.26326269330849],[-97.72804308547619,20.214540002740538],[-97.73134702145161,20.28983585094556]]],[[[-95.08076808669915,18.60008131582774],[-95.3240644231559,18.70452702315048],[-95.152588,18.708692],[-95.08076808669915,18.60008131582774]]],[[[-104.41611,19.12778],[-104.54778,19.23222],[-104.23389,19.21806],[-103.95556,18.9625],[-103.575,19.3875],[-103.52806,19.25778],[-103.72639,18.765],[-104.41611,19.12778]]],[[[-99.72667,17.74556],[-99.93167,18.31583],[-100.21833,18.38222],[-100.02139,18.49917],[-99.82389,18.32556],[-99.54306,18.60083],[-99.12222,18.18611],[-98.90694,18.39111],[-98.87611,18.22722],[-99.06861,18.15472],[-98.90417,18.02139],[-98.57333,17.86944],[-98.48083,17.96444],[-98.57028,17.34],[-98.80389,17.39167],[-98.88389,17.19972],[-99.45444,17.71306],[-99.52833,17.63639],[-99.56028,17.81833],[-99.72667,17.74556]]],[[[-104.28361,19.32611],[-104.20889,19.50361],[-104.10056,19.45417],[-104.28361,19.32611]]],[[[-103.67444,18.5825],[-103.63194,18.76667],[-103.44694,18.55667],[-103.33306,18.85472],[-103.16,18.77694],[-103.4125,18.38722],[-103.13583,18.43167],[-102.7973852582105,18.09672909345466],[-103.51218922354317,18.358896515418596],[-103.67444,18.5825]]],[[[-99.23611,18.55028],[-98.995,18.6925],[-98.96361,18.87833],[-98.87944,18.675],[-99.23611,18.55028]]],[[[-99.28917,18.45833],[-99.32639,18.86028],[-99.24083,18.88111],[-99.28917,18.45833]]],[[[-93.57694,17.98833],[-94.02694,18.20639],[-93.45222,18.12083],[-93.12278,18.26056],[-93.32806,17.96722],[-93.57694,17.98833]]],[[[-99.98528,19.03944],[-99.88028,19.16833],[-99.90389,19.03611],[-99.98528,19.03944]]],[[[-99.0875,19.19083],[-98.90806,19.56806],[-99.275,19.84056],[-98.97556,19.79361],[-98.72417,19.51472],[-99.0875,19.19083]]],[[[-99.48083,19.13333],[-99.31417,19.625],[-99.41389,19.57472],[-99.29,19.14556],[-99.48083,19.13333]]]]},properties:{variante:"020101_papago"}}},{ID_FAM:3,CLAVE_FAM:"03",NOM_FAM:"Cochimí-yumana",id:"cochimiyumana",agrupaciones:["paipai","kuahl","cucapa","kumiai","kiliwa"],path:"<path d=\"M45.39773155555555,41.971555555555554 45.10512761608537,41.39690955077487 44.88829866666667,41.21975466666667 45.06041802456019,41.233983086408905 44.85925688888889,41.08859022222222 45.10795377777777,41.174912 45.10676622222222,40.905877333333336 45.00208214649592,40.899306766678095 45.29234112362121,40.86307367214778 45.159310222222224,41.166222222222224 45.417088,41.29125688888889 45.53567269824406,41.528580422433244 45.688490666666674,41.412544 45.63990044444445,41.58222222222222 45.836643555555554,41.72187733333333 45.63733333333333,41.83920104091928 45.63733333333333,42.253432888888895 45.50735644444445,41.990520888888895 45.39773155555555,41.971555555555554 M45.63733333333333,41.476544000000004 45.63733333333333,41.49063779324569 45.64128711111111,41.48681244444444 45.63733333333333,41.476544000000004 M45.37720227283814,41.39754580443098 45.378766222222225,41.35111111111111 45.3307618130324,41.359145529459134 45.37720227283814,41.39754580443098 M46.00928711111111,41.13303466666667 45.895766577168615,40.78774793470834 46.39111111111111,40.90547911111111 46.028643555555554,41.12592355555555 46.23565511111111,41.227456 46.31147737048652,41.74551497976456 46.00928711111111,41.13303466666667 M46.33284323213088,41.89149818544116 46.33935644444445,41.936 46.28420010024742,41.79032415237587 46.33284323213088,41.89149818544116Z\"/>",geojson:{type:"Feature",geometry:{type:"MultiPolygon",coordinates:[[[[-116.15944,30.9775],[-116.57091428987995,31.78559594422283],[-116.87583,32.03472],[-116.63378715296223,32.01471128473747],[-116.91667,32.21917],[-116.56694,32.09778],[-116.56861,32.47611],[-116.71582198149011,32.485349859358934],[-116.30764529490767,32.53630264854219],[-116.49472,32.11],[-116.13222,31.93417],[-115.96546026809429,31.60043378095325],[-115.75056,31.76361],[-115.81889,31.525],[-115.54222,31.32861],[-115.8225,31.163623536207268],[-115.8225,30.58111],[-116.00528,30.95083],[-116.15944,30.9775]],[[-115.8225,31.67361],[-115.8225,31.653790603248254],[-115.81694,31.65917],[-115.8225,31.67361]],[[-116.18830930382137,31.784701212518932],[-116.18611,31.85],[-116.25361620042318,31.83870159919809],[-116.18830930382137,31.784701212518932]]],[[[-115.29944,32.15667],[-115.45907825085663,32.642229466816396],[-114.7625,32.47667],[-115.27222,32.16667],[-114.98111,32.02389],[-114.87448494775333,31.295369559706092],[-115.29944,32.15667]]],[[[-114.84443920481596,31.09008067672337],[-114.83528,31.0275],[-114.91284360902706,31.232356660721436],[-114.84443920481596,31.09008067672337]]]]},properties:{variante:"030101_paipai"}}},{ID_FAM:4,CLAVE_FAM:"04",NOM_FAM:"Seri",id:"seri",agrupaciones:["seri"],path:"<path d=\"M48.465871300679524,43.77431139156723 47.97183185538363,43.77431139156723 47.971399615687794,43.160276413265564 48.073137072866665,43.07151672490056 47.97121834780001,42.90923409174626 47.97108696205776,42.7295540582339 48.46749071449861,42.7295540582339 48.465871300679524,43.77431139156723Z\"/>",geojson:{type:"Feature",properties:{variante:"040101_seri"},geometry:{type:"Polygon",coordinates:[[[-111.84486848341942,28.442374605608585],[-112.53961145336677,28.442374605608585],[-112.54021929043904,29.3058612938453],[-112.39715099128125,29.43067960560858],[-112.54047419840623,29.658889558481828],[-112.54065895960628,29.911564605608575],[-111.84259118273633,29.911564605608575],[-111.84486848341942,28.442374605608585]]]}}},{ID_FAM:5,CLAVE_FAM:"05",NOM_FAM:"Oto-mangue",id:"otomangue",agrupaciones:["otomi","mazahua","matlatzinca","tlahuica","pame","chichimecojonaz","chinanteco","tlapaneco","mazateco","ixcateco","chocholteco","popoloca","zapoteco","chatino","amuzgo","mixteco","cuicateco","triqui"],path:"<path d=\"M59.21046755555555,52.273578666666666 59.128490666666664,52.17125688888889 59.28296533333333,51.95456711111111 58.868145777777784,51.84533333333333 58.92246755555555,51.68197688888889 58.75062044444444,51.51565511111111 58.931717546745816,51.51880034826462 58.79209955555555,51.39654399999999 58.89678933333334,51.35842133333333 58.99871288888888,51.57629866666666 58.928199111111105,51.55278933333334 59.30119259966637,51.89781081577337 59.40404622222222,51.85046755555556 59.424988444444445,51.95575466666667 59.61935644444444,51.994666666666674 59.66419911111112,52.154467555555556 59.29639822222222,51.993678222222215 59.21046755555555,52.273578666666666 M59.485823999999994,52.093432888888884 59.515064888888894,52.06064355555555 59.467859882460175,52.01567521206662 59.485823999999994,52.093432888888884 M59.161088,51.84888888888889 59.086965137144055,51.72497540299316 58.93590044444444,51.73985422222222 59.00365511111111,51.75644444444444 59.043105396610066,51.69295748176792 58.92365856490359,51.6057604486432 58.93010327055546,51.73222264783044 59.021824,51.80937955555556 58.99140977777778,51.837432888888884 58.93452088888889,51.78212266666667 58.98212266666667,51.85086577777778 59.161088,51.84888888888889 M59.57390942486444,52.05826132903822 59.488380949801204,52.02137260818237 59.51288888888889,52.05629866666667 59.57390942486444,52.05826132903822 M59.25173305434237,51.850171780544365 59.20019553764079,51.807634397307034 59.19196742890922,51.837643818860364 59.25173305434237,51.850171780544365 M57.95259022222222,52.064988444444445 57.978467555555554,51.96068977777778 58.090666666666664,52.09224533333333 57.98103466666667,51.961088 58.10666666666667,51.933823999999994 57.956743111111116,51.90597688888889 57.947455999999995,51.734911999999994 57.75684266666667,52.1299768888889 57.697976888888896,51.89313422222222 57.51249066666667,52.06478933333334 57.424,51.86943288888889 57.52903355296034,51.90265684457039 57.510912,51.81846755555556 57.239712199243016,51.8297801225532 57.46093511111111,51.90084266666666 57.438023111111114,52.08177777777777 57.224888888888884,52.09244444444444 57.30252088888889,51.98676622222222 57.23326432930149,51.830583199158575 57.593428452620294,51.75134541172269 57.853034666666666,51.44592355555556 57.93481244444445,51.43150933333333 57.95180088888889,51.598222222222226 58.25046755555556,51.62785422222222 58.018368,51.44928711111111 58.105678222222224,51.347157333333335 58.2332871111111,51.429731555555556 58.37826844444445,51.36928711111111 58.266666666666666,51.28987733333334 58.421532444444445,51.335310222222226 58.44088888888889,51.19703466666667 58.49086577777778,51.45224533333333 58.36827813256987,51.6427607820355 58.53135644444444,51.67012266666667 58.44957866666667,51.76967822222222 58.36568701887697,51.704897596570206 58.373415726084055,51.79561515679945 58.51555555555555,51.779555555555554 58.50196555484729,51.92409351397617 58.28977777777778,51.98913422222222 58.24296533333333,51.77086577777778 58.17007644444445,51.82281244444445 57.96408361303718,51.64701932180701 58.24474311111111,51.897678222222225 58.153088000000004,51.907356444444446 58.197923555555555,52.105087999999995 57.908145777777776,52.39071288888889 57.738865777777775,52.210176 57.95259022222222,52.064988444444445 M57.66557866666666,52.051953777777776 57.76098844444444,52.07624533333333 57.734520888888895,52.050176 57.66557866666666,52.051953777777776 M58.35099564187365,51.877601038239945 58.358912000000004,51.87832177777778 58.362387106321734,51.87387635483583 58.35099564187365,51.877601038239945 M58.36572493755463,51.87557392513092 58.41328001774488,51.85639360064909 58.41560177777778,51.84118755555555 58.4031802394708,51.83237811453201 58.36572493755463,51.87557392513092 M58.41197909172366,51.864913835066766 58.36027939263818,51.881328516064485 58.35237634983134,51.897294491751 58.36147911111111,51.89274311111111 58.37590044444445,51.903210666666666 58.40947911111111,51.881287111111114 58.41197909172366,51.864913835066766 M57.83229866666666,51.54014577777778 57.81880268281423,51.5577358648617 57.82933333333334,51.56226844444444 57.86370133333333,51.61046755555555 57.86508800000001,51.66893511111111 57.81747911111111,51.66715733333333 57.79575466666666,51.65629866666667 57.78468977777778,51.638321777777776 57.7844469658078,51.60251363435087 57.74262044444444,51.67071288888889 57.744398222222216,51.67802311111111 57.73357160467336,51.67255261949751 57.73951999931112,51.721051904539316 57.74762391406992,51.719371478768494 57.78587733333334,51.68059022222223 57.79773155555555,51.678222222222225 57.81274311111111,51.68276622222222 57.807399432384756,51.70697644199548 57.82639863300916,51.703036772427794 57.82301155555555,51.676245333333334 57.83486577777778,51.668544 57.86133333333334,51.67446755555556 57.86233707851099,51.69502519248876 57.86866386003136,51.69427266534969 57.87062044444445,51.681777777777775 57.877552546098066,51.68148921101102 57.88576112687029,51.669683864675285 57.85619911111111,51.58242133333333 57.86221098977407,51.58028998605615 57.83229866666666,51.54014577777778 M57.872002961377426,51.693580270115994 57.87424318193146,51.693115738532995 57.87369458493659,51.69139881280468 57.872002961377426,51.693580270115994 M57.865450193232874,51.75184499845371 57.85381283950438,51.75329442076102 57.86607644444445,51.80780088888889 57.85007644444444,51.81570133333334 57.858368000000006,51.879509333333324 57.88839822222222,51.885432888888886 57.91022403250989,51.92367032871001 57.913479111111116,51.92177777777778 57.867456,51.774620444444444 57.865450193232874,51.75184499845371 M57.70245320403479,51.77214613200003 57.694812444444445,51.77975466666667 57.70706488888889,51.81234488888889 57.703848637576264,51.85485074543842 57.7126144697112,51.84813984821685 57.71657835865677,51.7703868562505 57.70245320403479,51.77214613200003 M57.741823999999994,51.82577777777777 57.750912,51.82715733333333 57.77737955555556,51.78370133333333 57.776175717018106,51.76296405698866 57.75760743347287,51.76527672058958 57.741823999999994,51.82577777777777 M58.288966931239905,51.62246949958583 58.298865777777785,51.63812266666666 58.296490666666664,51.653333333333336 58.28918755555556,51.66814577777778 58.27259022222222,51.673088 58.253823999999994,51.69026844444445 58.24177777777778,51.705678222222225 58.22597688888889,51.704888888888895 58.21590044444445,51.70014577777777 58.210093830265095,51.715689554095896 58.26725688888889,51.70626844444444 58.297087999999995,51.67525688888889 58.303210666666665,51.65511111111111 58.30222222222222,51.62429866666667 58.288966931239905,51.62246949958583 M57.88150668335423,51.68132460976015 57.908544000000006,51.680199111111115 57.93315138466237,51.65461835522846 57.929888666586876,51.65134264019398 57.929479111111114,51.65353244444444 57.90557866666667,51.669333333333334 57.89059993588439,51.66959827613934 57.88150668335423,51.68132460976015 M58.46394939554514,51.376092888928945 58.44543288888889,51.44731022222222 58.450368,51.453233777777776 58.4617651575772,51.45615060958967 58.484935111111106,51.44868977777778 58.46394939554514,51.376092888928945 M59.376789333333335,51.23555555555556 59.00503466666667,51.53975466666667 59.011356444444445,51.31318755555556 59.52731022222222,51.09846755555555 59.44513422222222,50.77333333333334 59.686321777777785,50.89125688888889 59.65649066666667,51.18715733333334 59.98281244444445,51.10380088888889 60.12740977777778,51.25866666666666 60.18014577777778,51.12947911111111 60.26429866666666,51.49846755555556 60.18370133333333,51.57234488888889 60.64296533333333,51.760199111111106 60.834567111111106,51.62686577777777 61.04691199999999,51.72246755555555 60.786176,51.793777777777784 60.15921066666667,51.61462044444445 59.97313422222222,51.662222222222226 60.068544,51.547256888888896 59.973333333333336,51.52078933333333 59.75802311111111,51.68829866666666 59.641261540758975,51.42245035166108 59.15911111111111,51.535011555555556 59.20493511111111,51.44671288888889 59.429134222222224,51.458368 59.41135644444444,51.293824 59.58696533333333,51.245824000000006 59.376789333333335,51.23555555555556 M59.34321066666667,51.17432177777777 59.333532444444444,51.16444444444445 59.29876622222223,51.18380088888889 59.34321066666667,51.17432177777777 M59.08642133333334,51.26123377777778 59.05363199999999,51.33570133333334 59.102812444444446,51.31259022222223 59.08642133333334,51.26123377777778 M59.729136666412884,51.3466990041468 59.841379555555555,51.36157866666667 59.864084148602466,51.291119039910136 59.783111111111104,51.333532444444444 59.76059022222223,51.271111111111104 59.69284266666667,51.26557866666666 59.678222222222225,51.28987733333334 59.705678222222225,51.35565511111111 59.729136666412884,51.3466990041468 M59.69284266666667,51.26557866666666 59.662222222222226,51.20987733333334 59.64486855372159,51.207885307528706 59.69284266666667,51.26557866666666 M59.80637815563619,51.586303144477434 59.79293535497953,51.58080381693607 59.795044948078996,51.59510702458783 59.80637815563619,51.586303144477434 M59.67881064709301,51.439853830167195 59.724444444444444,51.448490666666665 59.80662044444444,51.376789333333335 59.707256888888885,51.35940977777778 59.68059022222223,51.369877333333335 59.65866666666666,51.39298844444444 59.712590222222225,51.442367999999995 59.67881064709301,51.439853830167195 M60.063507675354394,51.44175099572273 59.99909829069231,51.30124120742257 59.973532444444444,51.44315733333333 60.01501155555555,51.497877333333335 60.06459022222222,51.500046222222224 60.063507675354394,51.44175099572273 M59.995267819439405,51.29288499182358 59.973333333333336,51.24503466666667 59.874809499896045,51.28550113699725 59.97925688888889,51.330368 59.995267819439405,51.29288499182358 M59.79102661462467,51.567862406739195 59.82759694753565,51.49244026945651 59.796544000000004,51.490368000000004 59.79102661462467,51.567862406739195 M59.89078252842434,51.4913431326997 59.919642331462,51.518732926220565 59.92908799999999,51.49826844444445 59.89078252842434,51.4913431326997 M57.935011555555555,49.44592355555556 58.246122666666665,49.20157866666666 58.19140977777778,49.08839822222223 58.56790044444444,49.020245333333335 58.73619911111111,49.432689777777775 58.19753244444445,49.64385422222222 58.28937955555556,49.89313422222222 58.224590222222226,49.950620444444446 58.1652033979678,49.771324921821005 58.073287111111114,49.99723377777778 57.592888888888886,49.678222222222225 57.44256711111111,49.73570133333334 57.39357866666667,50.109632 57.763555555555556,49.97866666666667 57.75960177777778,49.86765511111111 57.835064888888894,49.932245333333334 57.38666666666667,50.17481244444444 57.31397688888889,50.351409777777775 57.09531022222222,50.31506488888889 56.92701155555556,50.48592355555555 56.73975466666666,50.47387733333334 56.854520888888885,50.345088000000004 56.8306311417643,50.14025691279087 56.76404622222222,50.345877333333334 56.75239822222222,50.265479111111105 56.570865777777776,50.317034666666665 56.75081244444444,50.235256888888884 56.562567111111115,50.23150933333333 56.942620444444444,49.67387733333334 56.78321066666666,49.731356444444444 56.69767822222222,49.58577777777778 56.84464355555556,49.379555555555555 56.609578666666664,49.36 56.51357866666666,49.497287111111106 56.44662044444445,49.454620444444444 56.55881244444445,49.35131022222222 56.41797688888889,49.13422222222222 56.17876622222222,49.48997688888889 56.21590044444445,49.13363199999999 56.310122666666665,49.077333333333335 56.21373155555556,48.98409955555556 56.41402311111111,49.083456000000005 56.47703466666666,49.00859022222222 56.59180088888889,49.166222222222224 56.71723377777778,49.02656711111111 56.88434488888889,49.109731555555555 56.95525688888888,49.03980088888889 57.03624533333334,49.168590222222214 57.26913422222222,49.11446755555555 57.14350933333333,49.344 56.95743288888889,49.369088 56.970865777777774,49.64543288888889 57.145479111111115,49.68059022222223 57.08642133333334,49.750912 57.21935644444444,49.879509333333324 57.31101155555555,49.89115733333334 57.27249066666666,49.20770133333333 57.38173155555556,48.99713422222222 57.74202311111111,48.95170133333333 57.853034666666666,49.14449066666667 57.94074311111111,49.118023111111114 57.68395377777778,49.09155555555555 57.58281244444444,49.188344888888885 57.82103466666666,49.30271288888889 57.933824,49.56898844444444 58.033976888888894,49.60770133333333 58.221558977855715,49.368569650913095 57.935011555555555,49.44592355555556 M56.75020901809791,50.07104812993004 56.70321066666666,50.12977777777778 56.77195377777778,50.11357866666666 56.75020901809791,50.07104812993004 M56.84232025349346,49.9001419151626 56.83753244444444,49.887409777777776 56.829293664221034,49.90227569690291 56.84232025349346,49.9001419151626 M58.160765490992354,49.75416941504034 58.150520888888884,49.714567111111116 58.09935644444444,49.695409777777776 58.10311111111111,49.738076444444445 58.13985422222222,49.72760177777778 58.160765490992354,49.75416941504034 M58.07304371922429,49.64586576700594 58.10686577777778,49.635555555555555 58.13056711111111,49.51111111111111 58.153863978511495,49.50266848066458 58.10390044444444,49.51901155555556 58.10725688888889,49.588145777777775 58.06755555555556,49.62903466666667 58.07304371922429,49.64586576700594 M58.16542961751804,49.498477169689934 58.204046222222225,49.48444444444445 58.250865777777776,49.429134222222224 58.16542961751804,49.498477169689934 M56.78455373111625,49.98300369415055 56.793678222222226,49.977678222222224 56.798439024937245,49.95794929903691 56.78455373111625,49.98300369415055 M57.05560177777778,49.56404622222222 57.092544,49.39298844444444 57.25155555555556,49.401479111111115 57.19131022222222,49.556544 57.05560177777778,49.56404622222222 M58.38727822222223,50.31071288888889 58.38656711111111,50.31071288888889 58.38656711111111,50.31000177777778 58.38727822222223,50.31000177777778 58.38727822222223,50.31071288888889 M57.30390044444444,50.503509333333334 57.329976888888886,50.44740977777778 57.345777777777776,50.507655111111106 57.30390044444444,50.503509333333334 M56.930368,47.963456 56.91160177777778,47.89234488888889 57.15871288888889,47.915456000000006 57.277233777777774,48.09125688888889 57.18992355555556,48.36859022222222 57.28346829466581,48.40124508267899 57.36888888888889,48.24414577777778 57.57333333333334,48.69452088888889 57.35523444877002,48.523992369802464 57.318912,48.706766222222214 57.174321777777784,48.70262044444445 57.120789333333335,48.17639822222222 57.04474311111112,48.19950933333334 56.930368,47.963456 M56.45135644444444,48.97521066666667 56.537678222222226,48.90844444444445 56.38893511111112,48.861432888888885 56.59614577777778,48.79407644444444 56.63506488888889,48.608789333333334 56.69115733333334,48.706176 56.561976888888886,48.98468977777778 56.45135644444444,48.97521066666667 M57.49629866666666,51.743800888888885 57.530268444444445,51.673479111111114 57.56286577777777,51.682368000000004 57.49629866666666,51.743800888888885 M57.73846755555556,51.61185422222223 57.70943288888889,51.62212266666666 57.73649066666667,51.60118755555556 57.73846755555556,51.61185422222223 M57.64464355555556,51.698367999999995 57.66004622222222,51.613632 57.68355555555556,51.65096533333333 57.64464355555556,51.698367999999995 M59.26459022222222,50.95209955555555 59.273087999999994,50.79703466666667 59.35644444444444,50.80315733333334 59.54666666666667,51.04790044444445 59.41274311111111,51.11506488888889 59.39555555555556,50.98765511111112 59.26459022222222,50.95209955555555 M59.319701333333335,51.091356444444436 59.32977777777778,51.04750933333334 59.380935111111114,51.09866666666667 59.319701333333335,51.091356444444436 M59.26301155555556,51.183409777777776 59.225678222222214,51.168199111111115 59.275064888888885,51.160888888888884 59.26301155555556,51.183409777777776 M59.09531022222222,51.07239822222222 59.14528711111112,51.02004622222222 59.02696533333334,51.026368000000005 59.213824,50.74311111111111 59.20434488888889,51.119409777777776 59.09531022222222,51.07239822222222 M59.17717989301131,50.948527350430474 59.180046222222224,50.945187555555556 59.180094615795085,50.94368041042777 59.17717989301131,50.948527350430474 M59.00543288888888,51.23160177777778 59.071210666666666,51.10044444444444 59.131256888888885,51.156544000000004 59.00543288888888,51.23160177777778 M59.06074311111111,51.06409955555556 59.071800888888895,51.05106488888889 59.07022222222222,51.07081244444445 59.06074311111111,51.06409955555556 M59.20434488888889,51.08662044444444 59.25274311111111,51.00385422222222 59.2979768888889,51.08859022222223 59.20434488888889,51.08662044444444 M59.08456533333334,51.06765511111111 59.08385422222222,51.06765511111111 59.08385422222222,51.066944 59.08456533333334,51.066944 59.08456533333334,51.06765511111111 M59.116046222222224,51.08937955555555 59.09629866666666,51.091356444444436 59.111111111111114,51.08385422222222 59.116046222222224,51.08937955555555 M58.885845333333336,51.30468977777778 58.88513422222222,51.30468977777778 58.88513422222222,51.303978666666666 58.885845333333336,51.303978666666666 58.885845333333336,51.30468977777778 M58.631509333333334,51.394567111111115 58.64849066666667,51.36632177777778 58.73323377777778,51.37935644444444 58.631509333333334,51.394567111111115 M58.77807644444445,51.445532444444446 58.79506488888889,51.444145777777784 58.79565511111111,51.46706488888889 58.77807644444445,51.445532444444446 M58.58547911111111,50.74844444444444 58.59140977777778,50.66192355555555 58.64434488888889,50.69925688888888 58.58547911111111,50.74844444444444 M58.38143288888889,50.926620444444445 58.37649066666666,50.926620444444445 58.37649066666666,50.914176000000005 58.38143288888889,50.914176000000005 58.38143288888889,50.926620444444445 M58.686421333333335,51.04573155555556 58.61392355555556,51.111701333333336 58.6501774198022,51.0141781319397 58.33540977777778,50.863409777777775 58.624590222222224,50.77293511111111 58.74785422222222,50.98923377777778 58.686421333333335,51.04573155555556 M58.290766222222224,50.90153244444445 58.305187555555555,51.11446755555555 58.212544,51.03644444444444 58.257777777777775,50.740935111111106 58.290766222222224,50.90153244444445 M58.875456,52.27121066666666 58.88019911111111,52.202666666666666 58.92009955555556,52.256199111111115 58.875456,52.27121066666666 M58.914965333333335,52.218865777777786 58.85560420388622,52.090890396988236 58.705187555555554,52.123064888888884 58.964290127938995,52.08626541343172 59.10084266666667,51.90281244444445 59.14725688888889,52.07862044444444 59.01046711716163,52.10211892638254 59.085432888888896,52.29826844444445 58.871111111111105,52.48632177777778 59.00404622222222,52.584689777777776 58.78301934155665,52.626641471358816 58.93313422222222,52.60365511111111 58.972842666666665,52.69925688888888 58.488661014504274,52.60536805054028 58.64493511111112,52.493824000000004 58.475456,52.38992355555555 58.43830661915414,52.57691691060365 58.34139176158739,52.323499053490316 58.24829866666667,52.337777777777774 58.32612266666666,52.47111111111111 58.153775103126,52.4161514814369 58.233088,52.27180088888889 58.84740977777778,52.42133333333334 58.93826844444445,52.37432177777777 58.914965333333335,52.218865777777786 M58.708743111111104,52.614321777777775 58.68332931466834,52.60907619561902 58.68957866666666,52.613532444444445 58.708743111111104,52.614321777777775 M58.551701333333334,52.39585422222222 58.570865777777776,52.36662044444444 58.555456,52.343900444444444 58.551701333333334,52.39585422222222 M58.98591737028665,52.22492919787146 58.98074311111111,52.221824 58.946176,52.22321066666667 58.98591737028665,52.22492919787146 M58.99557252917013,52.104677598734085 58.999587881886065,52.10704095369887 59.00439620223631,52.10316182076652 58.99557252917013,52.104677598734085 M58.80452788631136,52.508443757217535 58.76266666666667,52.54242133333333 58.714076444444444,52.49284266666667 58.716046222222225,52.436544 58.699064888888884,52.42923377777778 58.663735237626405,52.42744058290581 58.67397688888889,52.46242133333333 58.67180088888889,52.50034488888889 58.711310222222224,52.53293511111111 58.719011555555554,52.597731555555555 58.776651451408725,52.623765334258586 58.77135644444445,52.566520888888896 58.80452788631136,52.508443757217535 M58.26669912052416,52.27931461072536 58.30034153471021,52.28167845224624 58.270135633670584,52.272529373583694 58.26669912052416,52.27931461072536 M58.30746334716723,52.28383558115638 58.3653845464138,52.30774269831987 58.34468977777777,52.295111111111105 58.30746334716723,52.28383558115638 M58.37323557922479,52.31057734198144 58.381824,52.313678222222215 58.389700770347375,52.302031783328395 58.37323557922479,52.31057734198144 M59.242666666666665,51.622712888888884 59.20987733333334,51.647999999999996 59.26577777777778,51.60296533333334 59.242666666666665,51.622712888888884 M59.30567822222223,51.605923555555556 59.33985422222222,51.531064888888885 59.35664355555556,51.79278933333333 59.30567822222223,51.605923555555556 M59.38271288888889,51.83111111111111 59.460743111111114,51.53975466666667 59.53046755555555,51.599011555555556 59.632789333333335,51.444344888888885 59.62547911111111,51.785087999999995 59.493923555555554,51.64898844444444 59.38271288888889,51.83111111111111 M59.56147911111111,51.754666666666665 59.56246755555556,51.71852088888889 59.593088,51.73668977777777 59.56147911111111,51.754666666666665 M59.58518755555555,51.69975466666667 59.58004622222222,51.69975466666667 59.58004622222222,51.694812444444445 59.58518755555555,51.694812444444445 59.58518755555555,51.69975466666667 M59.51367822222222,51.76059022222223 59.50834488888889,51.755256888888894 59.52652088888889,51.751111111111115 59.51367822222222,51.76059022222223 M59.57135644444445,51.80780088888889 59.53975466666667,51.79337955555555 59.58913422222222,51.79496533333333 59.57135644444445,51.80780088888889 M59.30311111111111,51.674076444444445 59.227655111111105,51.738268444444444 59.29935644444444,51.628643555555556 59.30311111111111,51.674076444444445 M59.13355377777778,52.34765511111111 59.13284266666666,52.34765511111111 59.13284266666666,52.34694399999999 59.13355377777778,52.34694399999999 59.13355377777778,52.34765511111111 M59.00059515148508,52.49268783062048 58.99357866666667,52.39209955555555 59.26768728012588,52.43269784475263 59.23456711111111,52.28918755555555 59.334911999999996,52.37767822222222 59.34281244444444,52.26409955555556 59.442965333333326,52.43555555555555 59.274524693386994,52.458173491694716 59.274268444444445,52.557034666666674 59.18715733333333,52.49086577777778 59.176689777777774,52.617877333333325 59.41925688888889,52.45728711111111 59.68059022222223,52.585877333333336 59.70271288888889,52.76602311111111 59.51802311111111,52.572842666666666 59.63259022222222,52.77985422222223 59.55219911111111,52.824099555555556 59.107671028386406,52.7965148630495 58.98232177777778,52.716046222222225 59.15575466666667,52.65066666666666 59.00059515148508,52.49268783062048 M59.608151125794826,52.58055848429655 59.53586809125866,52.57441128546119 59.62133333333333,52.61096533333334 59.608151125794826,52.58055848429655 M59.368460923705044,52.62265487025783 59.385678222222225,52.63367822222222 59.39258249622603,52.636267324973645 59.368460923705044,52.62265487025783 M59.127642876638504,52.55475417900683 59.11347911111112,52.48395377777778 59.05894241950495,52.48931232676993 59.03249066666666,52.52444444444444 59.127642876638504,52.55475417900683 M59.49195377777778,52.41481244444445 59.479310222222225,52.32276622222222 59.85777777777778,52.317432888888895 59.55555555555556,52.48592355555555 59.49195377777778,52.41481244444445 M59.93453511111111,52.009479111111105 59.933824,52.009479111111105 59.933824,52.008767999999996 59.93453511111111,52.008767999999996 59.93453511111111,52.009479111111105 M59.47330133333334,52.42567822222223 59.47259022222222,52.42567822222223 59.47259022222222,52.424967111111116 59.47330133333334,52.424967111111116 59.47330133333334,52.42567822222223 M59.691455999999995,52.445824 59.68829866666667,52.40809955555556 59.71832177777778,52.44622222222222 59.691455999999995,52.445824 M59.92900977777778,52.409287111111105 59.92829866666666,52.409287111111105 59.92829866666666,52.40699022222222 59.92900977777778,52.40699022222222 59.92900977777778,52.409287111111105 M59.109134222222224,51.85185422222222 59.109134222222224,51.83407644444445 59.14429866666667,51.82024533333333 59.109134222222224,51.85185422222222 M59.23062044444444,52.03259022222222 59.193087999999996,52.048590222222224 59.20098844444445,52.01975466666667 59.23062044444444,52.03259022222222 M59.35367822222222,52.084543999999994 59.31456711111111,52.084543999999994 59.31456711111111,52.06676622222222 59.35367822222222,52.06676622222222 59.35367822222222,52.084543999999994 M59.645233777777776,52.077632 59.68,51.98953244444445 60.03298844444445,52.009479111111105 59.705678222222225,52.257777777777775 59.645233777777776,52.077632 M59.55062044444445,51.97531022222223 59.45086577777777,51.82715733333333 59.594268444444445,51.86666666666667 59.55062044444445,51.97531022222223 M60.082965333333334,52.17639822222222 60,52.19555555555556 60.08098844444444,51.988145777777774 60.308544000000005,51.78824533333333 60.399409777777784,51.88049066666667 60.45432177777778,51.740245333333334 60.52898844444444,52.192988444444445 60.813824000000004,52.36464355555555 60.92721066666666,52.20226844444445 61.10123377777778,52.47604622222223 60.490467555555554,52.30064355555556 60.546766222222224,52.466176000000004 60.43555555555555,52.371157333333336 60.06814577777778,52.55506488888889 60.09777777777778,52.24098844444444 60.24632177777778,52.15131022222222 60.115628093644865,52.04266350536955 60.082965333333334,52.17639822222222 M60.12611669607495,52.027848034402396 60.125002989932796,52.029421178310265 60.13061602827239,52.03180638942587 60.12611669607495,52.027848034402396 M58.60977777777778,52.27259022222222 58.775310222222224,52.25876622222222 58.62953244444444,52.350620444444445 58.47111111111111,52.27259022222222 58.60977777777778,52.27259022222222 M58.326912,52.169479111111116 58.287409777777775,52.21392355555556 58.28937955555556,52.169479111111116 58.326912,52.169479111111116 M58.22953244444444,52.15131022222222 58.269632,52.011854222222226 58.39111111111111,52.04049066666666 58.22953244444444,52.15131022222222 M58.02449066666667,51.53224533333333 57.985379555555554,51.50123377777778 58.06380088888889,51.531064888888885 58.02449066666667,51.53224533333333 M58.07004444444445,51.643256888888885 58.06933333333333,51.643256888888885 58.06933333333333,51.642545777777784 58.07004444444445,51.642545777777784 58.07004444444445,51.643256888888885 M58.018688,51.554176 58.01797688888889,51.554176 58.01797688888889,51.55346488888889 58.018688,51.55346488888889 58.018688,51.554176 M57.66123377777778,52.23960177777778 57.500046222222224,52.12523377777777 57.70133333333333,52.14321066666667 57.66123377777778,52.23960177777778 M58.33481244444445,52.49975466666667 58.36878933333333,52.40533333333333 58.3629259065552,52.53432545085596 58.33481244444445,52.49975466666667 M58.61135644444444,52.20859022222222 58.681088,52.151701333333335 58.69293511111111,52.19456711111111 58.61135644444444,52.20859022222222 M58.46518755555555,52.16829866666667 58.555256888888884,51.98262044444444 58.615509333333335,52.10547911111111 58.46518755555555,52.16829866666667 M58.606812444444444,52.06557866666667 58.48987733333333,51.87062044444445 58.57718755555556,51.801088 58.697323030346624,51.96494647309746 58.606812444444444,52.06557866666667 M58.62004622222222,51.844935111111106 58.617877333333325,51.83249066666667 58.64,51.83703466666667 58.62004622222222,51.844935111111106 M58.654014259460666,51.82663074038397 58.70222222222222,51.74123377777778 58.65462044444444,51.874368 58.654014259460666,51.82663074038397 M58.66488888888889,51.77106488888889 58.63506488888889,51.77678933333333 58.67852088888889,51.74953244444444 58.66488888888889,51.77106488888889 M58.616888888888894,51.82222222222222 58.59674311111111,51.80642133333333 58.616888888888894,51.783111111111104 58.616888888888894,51.82222222222222 M58.59950933333333,51.76849066666667 58.63347911111111,51.63812266666666 58.67496533333333,51.68533333333334 58.59950933333333,51.76849066666667 M58.517134222222225,51.65747911111111 58.473088,51.60790044444445 58.54715733333334,51.61975466666667 58.517134222222225,51.65747911111111 M58.518912,51.578467555555555 58.458865777777774,51.53402311111111 58.68049066666667,51.42044444444445 58.713287111111114,51.546076444444445 58.518912,51.578467555555555 M58.85076622222222,51.95259022222222 58.84543288888889,51.91268977777777 58.858666666666664,51.892544 58.85076622222222,51.95259022222222 M58.88632177777778,52.00829866666666 58.93826844444445,51.923356444444444 58.95367822222222,51.994865777777775 58.88632177777778,52.00829866666666 M58.97117866666667,51.76809955555556 58.97046755555556,51.76809955555556 58.97046755555556,51.76738844444444 58.97117866666667,51.76738844444444 58.97117866666667,51.76809955555556 M58.75062044444444,51.784099555555564 58.75674311111111,51.711409777777774 58.83081244444444,51.64306488888889 58.75062044444444,51.784099555555564 M58.754368,51.66913422222222 58.74449066666667,51.66913422222222 58.74449066666667,51.66557866666666 58.754368,51.66557866666666 58.754368,51.66913422222222 M58.826190222222216,51.77678933333333 58.825479111111115,51.77678933333333 58.825479111111115,51.77607822222223 58.826190222222216,51.77607822222223 58.826190222222216,51.77678933333333 M59.19624533333334,51.172344888888894 59.190321777777775,51.16306488888889 59.210865777777784,51.16523377777778 59.19624533333334,51.172344888888894 M58.69135644444444,51.93737955555556 58.66113422222222,51.86370133333333 58.70143288888889,51.890368 58.69135644444444,51.93737955555556 M58.817777777777785,51.885432888888886 58.81185422222222,51.885432888888886 58.81185422222222,51.88424533333333 58.817777777777785,51.88424533333333 58.817777777777785,51.885432888888886 M58.818488888888886,51.88424533333333 58.817777777777785,51.88424533333333 58.817777777777785,51.883534222222224 58.818488888888886,51.883534222222224 58.818488888888886,51.88424533333333 M58.728888888888896,51.85698844444445 58.71012266666666,51.841976888888894 58.728888888888896,51.83960177777778 58.728888888888896,51.85698844444445 M58.32888888888889,51.15456711111111 58.365632,51.006620444444444 58.588842666666665,51.09373155555556 58.32888888888889,51.15456711111111 M58.25453511111111,50.763456000000005 58.253823999999994,50.763456000000005 58.253823999999994,50.76274488888889 58.25453511111111,50.76274488888889 58.25453511111111,50.763456000000005Z\"/>",geojson:{type:"Feature",geometry:{type:"MultiPolygon",coordinates:[[[[-96.73528,16.49028],[-96.85056,16.63417],[-96.63333,16.93889],[-97.21667,17.0925],[-97.14028,17.32222],[-97.38194,17.55611],[-97.1272721998887,17.551687010252877],[-97.32361,17.72361],[-97.17639,17.77722],[-97.03306,17.47083],[-97.13222,17.50389],[-96.60769790671917,17.018703540318693],[-96.46306,17.08528],[-96.43361,16.93722],[-96.16028,16.8825],[-96.09722,16.65778],[-96.61444,16.88389],[-96.73528,16.49028]],[[-96.34806,16.74361],[-96.30694,16.78972],[-96.37332204029038,16.85295673303132],[-96.34806,16.74361]],[[-96.80472,17.0875],[-96.90895527589117,17.261753339540874],[-97.12139,17.24083],[-97.02611,17.2175],[-96.97063303601709,17.306778541263864],[-97.13860514310433,17.42939936909549],[-97.12954227578138,17.25156190148844],[-97.00056,17.14306],[-97.04333,17.10361],[-97.12333,17.18139],[-97.05639,17.08472],[-96.80472,17.0875]],[[-96.22418987128438,16.793070006040008],[-96.34446428934206,16.84494476974355],[-96.31,16.79583],[-96.22418987128438,16.793070006040008]],[[-96.67725039233105,17.08569593360949],[-96.74972502519265,17.14551412878698],[-96.7612958030964,17.10331337972761],[-96.67725039233105,17.08569593360949]]],[[[-98.50417,16.78361],[-98.46778,16.93028],[-98.31,16.74528],[-98.46417,16.92972],[-98.2875,16.96806],[-98.49833,17.00722],[-98.51139,17.24778],[-98.77944,16.69222],[-98.86222,17.02528],[-99.12306,16.78389],[-99.2475,17.05861],[-99.09979656614952,17.011888812322898],[-99.12528,17.13028],[-99.5066547198145,17.114371702659557],[-99.19556,17.01444],[-99.22778,16.76],[-99.5275,16.745],[-99.41833,16.89361],[-99.51572203691978,17.113242376183244],[-99.00924123850271,17.22467051476497],[-98.64417,17.65417],[-98.52917,17.67444],[-98.50528,17.44],[-98.08528,17.39833],[-98.41167,17.64944],[-98.28889,17.79306],[-98.10944,17.67694],[-97.90556,17.76194],[-98.0625,17.87361],[-97.84472,17.80972],[-97.8175,18.00417],[-97.74722,17.64528],[-97.91960887607362,17.37736765026257],[-97.69028,17.33889],[-97.80528,17.19889],[-97.92325262970427,17.28998775482314],[-97.9123841351943,17.16241618575078],[-97.7125,17.185],[-97.731610938496,16.981743495971024],[-98.03,16.89028],[-98.09583,17.19722],[-98.19833,17.12417],[-98.48800741916646,17.371379078708895],[-98.09333,17.01889],[-98.22222,17.00528],[-98.15917,16.72722],[-98.56667,16.32556],[-98.80472,16.57944],[-98.50417,16.78361]],[[-98.90778,16.80194],[-98.77361,16.76778],[-98.81083,16.80444],[-98.90778,16.80194]],[[-97.94391237861518,17.04712353997508],[-97.93278,17.04611],[-97.92789313173506,17.05236137601211],[-97.94391237861518,17.04712353997508]],[[-97.9231993065638,17.049974167784637],[-97.85632497504626,17.076946499087217],[-97.85306,17.09833],[-97.87052778824419,17.11071827643936],[-97.9231993065638,17.049974167784637]],[[-97.85815440226361,17.06496491943735],[-97.93085710410256,17.04188177428432],[-97.94197075804968,17.019429620975163],[-97.92917,17.02583],[-97.90889,17.01111],[-97.86167,17.04194],[-97.85815440226361,17.06496491943735]],[[-98.67333,17.52167],[-98.69230872729248,17.496933940038232],[-98.6775,17.49056],[-98.62917,17.42278],[-98.62722,17.34056],[-98.69417,17.34306],[-98.72472,17.35833],[-98.74028,17.38361],[-98.74062145433278,17.433965201694086],[-98.79944,17.33806],[-98.79694,17.32778],[-98.81216493092809,17.335472878831624],[-98.80380000096874,17.26727075924158],[-98.79240387083918,17.269633857981802],[-98.73861,17.32417],[-98.72194,17.3275],[-98.70083,17.32111],[-98.70834454820894,17.28706437844386],[-98.68162692233086,17.292604538773414],[-98.68639,17.33028],[-98.66972,17.34111],[-98.6325,17.33278],[-98.63108848334392,17.303870823062677],[-98.6221914468309,17.30492906435199],[-98.61944,17.3225],[-98.6096917320496,17.32290579701575],[-98.59814841533866,17.33950706530039],[-98.63972,17.46222],[-98.63126579563021,17.46521720710854],[-98.67333,17.52167]],[[-98.61749583556299,17.30590274514939],[-98.61434552540888,17.306555992687972],[-98.61511698993293,17.308970419493413],[-98.61749583556299,17.30590274514939]],[[-98.62671066576627,17.22396797092447],[-98.64307569444696,17.221929720804816],[-98.62583,17.14528],[-98.64833,17.13417],[-98.63667,17.04444],[-98.59444,17.03611],[-98.56374745428298,16.982338600251545],[-98.55917,16.985],[-98.62389,17.19194],[-98.62671066576627,17.22396797092447]],[[-98.85592518182608,17.19541950187495],[-98.86667,17.18472],[-98.84944,17.13889],[-98.85396285340838,17.07911613922722],[-98.84163590196863,17.08855333844505],[-98.83606168313892,17.197893483397735],[-98.85592518182608,17.19541950187495]],[[-98.80056,17.12],[-98.78778,17.11806],[-98.75056,17.17917],[-98.7522528979433,17.208331794859696],[-98.77836454667877,17.205079611670904],[-98.80056,17.12]],[[-98.03114025294389,17.40590226620742],[-98.01722,17.38389],[-98.02056,17.3625],[-98.03083,17.34167],[-98.05417,17.33472],[-98.08056,17.31056],[-98.0975,17.28889],[-98.11972,17.29],[-98.13389,17.29667],[-98.14205555118971,17.27481156455265],[-98.06167,17.28806],[-98.01972,17.33167],[-98.01111,17.36],[-98.0125,17.40333],[-98.03114025294389,17.40590226620742]],[[-98.60413122653311,17.323137267524782],[-98.56611,17.32472],[-98.53150586531855,17.360692937959975],[-98.53609406261221,17.365299412227213],[-98.53667,17.36222],[-98.57028,17.34],[-98.59134384016258,17.339627424179056],[-98.60413122653311,17.323137267524782]],[[-97.78507116251464,17.752369374943676],[-97.81111,17.65222],[-97.80417,17.64389],[-97.78814274715707,17.639788205264516],[-97.75556,17.65028],[-97.78507116251464,17.752369374943676]]],[[[-96.50139,17.95],[-97.02417,17.52222],[-97.01528,17.84083],[-96.28972,18.14278],[-96.40528,18.6],[-96.06611,18.43417],[-96.10806,18.01806],[-95.64917,18.13528],[-95.44583,17.9175],[-95.37167,18.09917],[-95.25333,17.58028],[-95.36667,17.47639],[-94.72083,17.21222],[-94.45139,17.39972],[-94.15278,17.26528],[-94.51944,17.165],[-95.40111,17.41694],[-95.66278,17.35],[-95.52861,17.51167],[-95.6625,17.54889],[-95.96528,17.31333],[-96.1294759583077,17.68717919297661],[-96.8075,17.52889],[-96.74306,17.65306],[-96.42778,17.63667],[-96.45278,17.86806],[-96.20583,17.93556],[-96.50139,17.95]],[[-96.54861,18.03611],[-96.56222,18.05],[-96.61111,18.02278],[-96.54861,18.03611]],[[-96.90972,17.91389],[-96.95583,17.80917],[-96.88667,17.84167],[-96.90972,17.91389]],[[-96.00590156285688,17.79370452541856],[-95.84806,17.77278],[-95.81613166602779,17.871863850126378],[-95.93,17.81222],[-95.96167,17.9],[-96.05694,17.90778],[-96.0775,17.87361],[-96.03889,17.78111],[-96.00590156285688,17.79370452541856]],[[-96.05694,17.90778],[-96.1,17.98611],[-96.12440359632902,17.988911286287767],[-96.05694,17.90778]],[[-95.89728071863661,17.456761203078614],[-95.91618465706004,17.464494632433652],[-95.91321804176391,17.444380746673364],[-95.89728071863661,17.456761203078614]],[[-96.07667252752546,17.662705551327377],[-96.0125,17.65056],[-95.89694,17.75139],[-96.03667,17.77583],[-96.07417,17.76111],[-96.105,17.72861],[-96.02917,17.65917],[-96.07667252752546,17.662705551327377]],[[-95.53569233153289,17.66003766226491],[-95.62626802871394,17.857629552062004],[-95.66222,17.65806],[-95.60389,17.58111],[-95.53417,17.57806],[-95.53569233153289,17.66003766226491]],[[-95.63165462891334,17.8693804802481],[-95.6625,17.93667],[-95.80104914077118,17.879764026097615],[-95.65417,17.81667],[-95.63165462891334,17.8693804802481]],[[-95.91886882318406,17.48269349052301],[-95.86744179252798,17.58875587107678],[-95.91111,17.59167],[-95.91886882318406,17.48269349052301]],[[-95.77858706940327,17.59029871964105],[-95.73800297138156,17.55178182250234],[-95.72472,17.58056],[-95.77858706940327,17.59029871964105]]],[[[-98.52889,20.46667],[-98.09139,20.81028],[-98.16833,20.96944],[-97.63889,21.06528],[-97.40222,20.48528],[-98.15972,20.18833],[-98.03056,19.83778],[-98.12167,19.75694],[-98.20518272160778,20.009074328689206],[-98.33444,19.69139],[-99.01,20.14],[-99.22139,20.05917],[-99.29028,19.53333],[-98.77,19.7175],[-98.77556,19.87361],[-98.66944,19.78278],[-99.3,19.44167],[-99.40222,19.19333],[-99.70972,19.24444],[-99.94639,19.00417],[-100.20972,19.02111],[-100.04833,19.20222],[-100.08192495689396,19.490263716387844],[-100.17556,19.20111],[-100.19194,19.31417],[-100.44722,19.24167],[-100.19417,19.35667],[-100.45889,19.36194],[-99.92444,20.14611],[-100.14861,20.06528],[-100.26889,20.27],[-100.06222,20.56],[-100.39278,20.5875],[-100.52778,20.39444],[-100.62194,20.45444],[-100.46417,20.59972],[-100.66222,20.905],[-100.99861,20.40472],[-100.94639,20.90583],[-100.81389,20.985],[-100.94944,21.11611],[-100.66778,20.97639],[-100.57917,21.08167],[-100.41778,20.86],[-100.24139,21.05639],[-100.00639,20.93944],[-99.90667,21.03778],[-99.79278,20.85667],[-99.46528,20.93278],[-99.64194,20.61],[-99.90361,20.57472],[-99.88472,20.18611],[-99.63917,20.13667],[-99.72222,20.03778],[-99.53528,19.85694],[-99.40639,19.84056],[-99.46056,20.80167],[-99.30694,21.09778],[-98.80028,21.16167],[-98.64417,20.89056],[-98.52083,20.92778],[-98.88194,20.965],[-99.02417,20.82889],[-98.68917,20.66806],[-98.53056,20.29361],[-98.38972,20.23917],[-98.1259326873904,20.57544892840346],[-98.52889,20.46667]],[[-100.19501856829982,19.587588567285877],[-100.26111,19.505],[-100.16444,19.52778],[-100.19501856829982,19.587588567285877]],[[-100.06548714352482,19.8279254318026],[-100.07222,19.84583],[-100.08380578468918,19.824924801230274],[-100.06548714352482,19.8279254318026]],[[-98.211423528292,20.033199260099526],[-98.22583,20.08889],[-98.29778,20.11583],[-98.2925,20.05583],[-98.24083,20.07056],[-98.211423528292,20.033199260099526]],[[-98.33478226984084,20.185501265147902],[-98.28722,20.2],[-98.25389,20.375],[-98.22112878021821,20.386872449065432],[-98.29139,20.36389],[-98.28667,20.26667],[-98.3425,20.20917],[-98.33478226984084,20.185501265147902]],[[-98.20486460036526,20.392766480123527],[-98.15056,20.4125],[-98.08472,20.49028],[-98.20486460036526,20.392766480123527]],[[-100.14672131561778,19.7114010551008],[-100.13389,19.71889],[-100.127195121182,19.746633798229336],[-100.14672131561778,19.7114010551008]]],[[[-99.76556,20.30056],[-99.71361,20.54111],[-99.49,20.52917],[-99.57472,20.31111],[-99.76556,20.30056]]],[[[-97.89289,19.25056],[-97.89389,19.25056],[-97.89389,19.25156],[-97.89289,19.25156],[-97.89289,19.25056]]],[[[-99.41639,18.97944],[-99.37972,19.05833],[-99.3575,18.97361],[-99.41639,18.97944]]],[[[-99.94167,22.55139],[-99.96806,22.65139],[-99.62056,22.61889],[-99.45389,22.37167],[-99.57667,21.98167],[-99.44512271062621,21.93574910248268],[-99.325,22.15667],[-99.0375,21.52333],[-99.34420155641716,21.76313572996529],[-99.39528,21.50611],[-99.59861,21.51194],[-99.67389,22.25194],[-99.78083,22.21944],[-99.94167,22.55139]]],[[[-100.61528,21.12861],[-100.49389,21.2225],[-100.70306,21.28861],[-100.41167,21.38333],[-100.35694,21.64389],[-100.27806,21.50694],[-100.45972,21.11528],[-100.61528,21.12861]]],[[[-99.14583,17.23528],[-99.09806,17.33417],[-99.05222,17.32167],[-99.14583,17.23528]]],[[[-98.80528,17.42083],[-98.84611,17.40639],[-98.80806,17.43583],[-98.80528,17.42083]]],[[[-98.93722,17.29917],[-98.91556,17.41833],[-98.8825,17.36583],[-98.93722,17.29917]]],[[[-96.65917,18.34861],[-96.64722,18.56667],[-96.53,18.55806],[-96.2625,18.21389],[-96.45083,18.11944],[-96.475,18.29861],[-96.65917,18.34861]]],[[[-96.58167,18.15278],[-96.5675,18.21444],[-96.49556,18.1425],[-96.58167,18.15278]]],[[[-96.66139,18.02333],[-96.71389,18.04472],[-96.64444,18.055],[-96.66139,18.02333]]],[[[-96.89722,18.17944],[-96.82694,18.25306],[-96.99333,18.24417],[-96.73056,18.6425],[-96.74389,18.11333],[-96.89722,18.17944]],[[-96.78209077545284,18.35363341345714],[-96.77806,18.35833],[-96.77799194653817,18.36044942283595],[-96.78209077545284,18.35363341345714]]],[[[-97.02361,17.95556],[-96.93111,18.14],[-96.84667,18.06111],[-97.02361,17.95556]]],[[[-96.94583,18.19111],[-96.93028,18.20944],[-96.9325,18.18167],[-96.94583,18.19111]]],[[[-96.74389,18.15944],[-96.67583,18.27583],[-96.61222,18.15667],[-96.74389,18.15944]]],[[[-96.91233,18.18611],[-96.91333,18.18611],[-96.91333,18.18711],[-96.91233,18.18711],[-96.91233,18.18611]]],[[[-96.86806,18.15556],[-96.89583,18.15278],[-96.875,18.16333],[-96.86806,18.15556]]],[[[-97.19178,17.85278],[-97.19278,17.85278],[-97.19278,17.85378],[-97.19178,17.85378],[-97.19178,17.85278]]],[[[-97.54944,17.72639],[-97.52556,17.76611],[-97.40639,17.74778],[-97.54944,17.72639]]],[[[-97.34333,17.65472],[-97.31944,17.65667],[-97.31861,17.62444],[-97.34333,17.65472]]],[[[-97.61417,18.635],[-97.60583,18.75667],[-97.53139,18.70417],[-97.61417,18.635]]],[[[-97.90111,18.38444],[-97.90806,18.38444],[-97.90806,18.40194],[-97.90111,18.40194],[-97.90111,18.38444]]],[[[-97.47222,18.21694],[-97.57417,18.12417],[-97.52318800340316,18.2613120019598],[-97.96583,18.47333],[-97.55917,18.60056],[-97.38583,18.29639],[-97.47222,18.21694]]],[[[-98.02861,18.41972],[-98.00833,18.12028],[-98.13861,18.23],[-98.075,18.64556],[-98.02861,18.41972]]],[[[-97.20639,16.49361],[-97.19972,16.59],[-97.14361,16.51472],[-97.20639,16.49361]]],[[[-97.15083,16.56722],[-97.234306588285,16.747185379235287],[-97.44583,16.70194],[-97.08146700758579,16.753689262361647],[-96.88944,17.01167],[-96.82417,16.76444],[-97.01653061649145,16.731395259774562],[-96.91111,16.45556],[-97.2125,16.19111],[-97.02556,16.05278],[-97.33637905093596,15.993785430901664],[-97.12528,16.02611],[-97.06944,15.89167],[-97.75032044835336,16.023701178927734],[-97.53056,16.18056],[-97.76889,16.32667],[-97.82113131681449,16.063710594463615],[-97.95741783526773,16.420079456029246],[-98.08833,16.4],[-97.97889,16.2125],[-98.22125376122906,16.289786979229362],[-98.10972,16.49278],[-97.24583,16.2825],[-97.11806,16.34861],[-97.15083,16.56722]],[[-97.44083,16.01111],[-97.47656815124765,16.01848659991076],[-97.46778,16.01222],[-97.44083,16.01111]],[[-97.66167,16.31833],[-97.63472,16.35944],[-97.65639,16.39139],[-97.66167,16.31833]],[[-97.0510536980344,16.558693315493265],[-97.05833,16.56306],[-97.10694,16.56111],[-97.0510536980344,16.558693315493265]],[[-97.0374761308545,16.727797126780192],[-97.03182954109772,16.724473658860962],[-97.02506784060519,16.729928689547087],[-97.0374761308545,16.727797126780192]],[[-97.30613265987465,16.16000096641283],[-97.365,16.11222],[-97.43333,16.18194],[-97.43056,16.26111],[-97.45444,16.27139],[-97.50412232208787,16.273911680288712],[-97.48972,16.22472],[-97.49278,16.17139],[-97.43722,16.12556],[-97.42639,16.03444],[-97.34533389645648,15.997829998698856],[-97.35278,16.07833],[-97.30613265987465,16.16000096641283]],[[-98.0624543617629,16.48221382866747],[-98.01514471681377,16.478889676528716],[-98.05762176515074,16.491755568397934],[-98.0624543617629,16.48221382866747]],[[-98.00512966804608,16.475856213998842],[-97.92367798160559,16.44223683048769],[-97.95278,16.46],[-98.00512966804608,16.475856213998842]],[[-97.91263746671514,16.43825061283861],[-97.90056,16.43389],[-97.88948329169901,16.45026780469445],[-97.91263746671514,16.43825061283861]]],[[[-96.69,17.40556],[-96.73611,17.37],[-96.6575,17.43333],[-96.69,17.40556]]],[[[-96.60139,17.42917],[-96.55333,17.53444],[-96.52972,17.16639],[-96.60139,17.42917]]],[[[-96.49306,17.1125],[-96.38333,17.52222],[-96.28528,17.43889],[-96.14139,17.65639],[-96.15167,17.17722],[-96.33667,17.36861],[-96.49306,17.1125]]],[[[-96.24167,17.22],[-96.24028,17.27083],[-96.19722,17.24528],[-96.24167,17.22]]],[[[-96.20833,17.29722],[-96.21556,17.29722],[-96.21556,17.30417],[-96.20833,17.30417],[-96.20833,17.29722]]],[[[-96.30889,17.21167],[-96.31639,17.21917],[-96.29083,17.225],[-96.30889,17.21167]]],[[[-96.22778,17.14528],[-96.27222,17.16556],[-96.20278,17.16333],[-96.22778,17.14528]]],[[[-96.605,17.33333],[-96.71111,17.24306],[-96.61028,17.39722],[-96.605,17.33333]]],[[[-96.84344,16.38611],[-96.84444,16.38611],[-96.84444,16.38711],[-96.84344,16.38711],[-96.84344,16.38611]]],[[[-97.0304130682241,16.18215773818994],[-97.04028,16.32361],[-96.65481476232299,16.266518655816615],[-96.70139,16.46833],[-96.56028,16.34389],[-96.54917,16.50361],[-96.40833,16.2625],[-96.64519964992454,16.230693527304307],[-96.64556,16.09167],[-96.76806,16.18472],[-96.78278,16.00611],[-96.44167,16.23194],[-96.07417,16.05111],[-96.04306,15.79778],[-96.30278,16.06944],[-96.14167,15.77833],[-96.25472,15.71611],[-96.87983761633161,15.754900973836648],[-97.05611,15.86806],[-96.81222,15.96],[-97.0304130682241,16.18215773818994]],[[-96.17603747935102,16.058589631457973],[-96.2776854966675,16.067234129820207],[-96.1575,16.01583],[-96.17603747935102,16.058589631457973]],[[-96.51310182603979,15.999391588699917],[-96.48889,15.98389],[-96.47918086468215,15.98024907425581],[-96.51310182603979,15.999391588699917]],[[-96.8517522047271,16.094876935771644],[-96.87167,16.19444],[-96.94836222257116,16.186904540479787],[-96.98556,16.1375],[-96.8517522047271,16.094876935771644]]],[[[-96.33944,16.29167],[-96.35722,16.42111],[-95.825,16.42861],[-96.25,16.19167],[-96.33944,16.29167]]],[[[-95.71706,16.86167],[-95.71806,16.86167],[-95.71806,16.86267],[-95.71706,16.86267],[-95.71706,16.86167]]],[[[-96.36567,16.27639],[-96.36667,16.27639],[-96.36667,16.27739],[-96.36567,16.27739],[-96.36567,16.27639]]],[[[-96.05889,16.24806],[-96.06333,16.30111],[-96.02111,16.2475],[-96.05889,16.24806]]],[[[-95.72483,16.29944],[-95.72583,16.29944],[-95.72583,16.30267],[-95.72483,16.30267],[-95.72483,16.29944]]],[[[-96.87778,17.08333],[-96.87778,17.10833],[-96.82833,17.12778],[-96.87778,17.08333]]],[[[-96.70694,16.82917],[-96.75972,16.80667],[-96.74861,16.84722],[-96.70694,16.82917]]],[[[-96.53389,16.75611],[-96.58889,16.75611],[-96.58889,16.78111],[-96.53389,16.78111],[-96.53389,16.75611]]],[[[-96.12389,16.76583],[-96.075,16.88972],[-95.57861,16.86167],[-96.03889,16.5125],[-96.12389,16.76583]]],[[[-96.25694,16.90972],[-96.39722,17.11806],[-96.19556,17.0625],[-96.25694,16.90972]]],[[[-95.50833,16.62694],[-95.625,16.6],[-95.51111,16.89167],[-95.19111,17.17278],[-95.06333,17.04306],[-94.98611,17.24028],[-94.88111,16.60361],[-94.48056,16.36222],[-94.32111,16.59056],[-94.07639,16.20556],[-94.93528,16.45222],[-94.85611,16.21944],[-95.0125,16.35306],[-95.52917,16.09444],[-95.4875,16.53611],[-95.27861,16.66222],[-95.46239799331191,16.815004445574054],[-95.50833,16.62694]],[[-95.4476483961446,16.83583870162163],[-95.449214545407,16.83362646800118],[-95.44132121024195,16.83027226486987],[-95.4476483961446,16.83583870162163]]],[[[-97.58,16.49167],[-97.34722,16.51111],[-97.55222,16.38194],[-97.775,16.49167],[-97.58,16.49167]]],[[[-97.97778,16.63667],[-98.03333,16.57417],[-98.03056,16.63667],[-97.97778,16.63667]]],[[[-98.11472,16.66222],[-98.05833,16.85833],[-97.8875,16.81806],[-98.11472,16.66222]]],[[[-98.40306,17.53278],[-98.45806,17.57639],[-98.34778,17.53444],[-98.40306,17.53278]]],[[[-98.339,17.37667],[-98.34,17.37667],[-98.34,17.37767],[-98.339,17.37767],[-98.339,17.37667]]],[[[-98.41122,17.50194],[-98.41222,17.50194],[-98.41222,17.50294],[-98.41122,17.50294],[-98.41122,17.50194]]],[[[-98.91389,16.53806],[-99.14056,16.69889],[-98.8575,16.67361],[-98.91389,16.53806]]],[[[-97.96667,16.17222],[-97.91889,16.305],[-97.92713544390675,16.123604834733815],[-97.96667,16.17222]]],[[[-97.57778,16.58167],[-97.47972,16.66167],[-97.46306,16.60139],[-97.57778,16.58167]]],[[[-97.78333,16.63833],[-97.65667,16.89944],[-97.57194,16.72667],[-97.78333,16.63833]]],[[[-97.58417,16.78278],[-97.74861,17.05694],[-97.62583,17.15472],[-97.45688948857506,16.9242940222067],[-97.58417,16.78278]]],[[[-97.56556,17.09306],[-97.56861,17.11056],[-97.5375,17.10417],[-97.56556,17.09306]]],[[[-97.51779244763344,17.118800521335046],[-97.45,17.23889],[-97.51694,17.05167],[-97.51779244763344,17.118800521335046]]],[[[-97.5025,17.19694],[-97.54444,17.18889],[-97.48333,17.22722],[-97.5025,17.19694]]],[[[-97.57,17.125],[-97.59833,17.14722],[-97.57,17.18],[-97.57,17.125]]],[[[-97.59444,17.20056],[-97.54667,17.38389],[-97.48833,17.3175],[-97.59444,17.20056]]],[[[-97.71028,17.35667],[-97.77222,17.42639],[-97.66806,17.40972],[-97.71028,17.35667]]],[[[-97.70778,17.46778],[-97.79222,17.53028],[-97.48056,17.69],[-97.43444,17.51333],[-97.70778,17.46778]]],[[[-97.24111,16.94167],[-97.24861,16.99778],[-97.23,17.02611],[-97.24111,16.94167]]],[[[-97.19111,16.86333],[-97.11806,16.98278],[-97.09639,16.88222],[-97.19111,16.86333]]],[[[-97.07178,17.20111],[-97.07278,17.20111],[-97.07278,17.20211],[-97.07178,17.20211],[-97.07178,17.20111]]],[[[-97.38194,17.17861],[-97.37333,17.28083],[-97.26917,17.37694],[-97.38194,17.17861]]],[[[-97.37667,17.34028],[-97.39056,17.34028],[-97.39056,17.34528],[-97.37667,17.34528],[-97.37667,17.34028]]],[[[-97.27567,17.18889],[-97.27667,17.18889],[-97.27667,17.18989],[-97.27567,17.18989],[-97.27567,17.18889]]],[[[-96.75528,18.03889],[-96.76361,18.05194],[-96.73472,18.04889],[-96.75528,18.03889]]],[[[-97.46528,16.96306],[-97.50778,17.06667],[-97.45111,17.02917],[-97.46528,16.96306]]],[[[-97.2875,17.03611],[-97.29583,17.03611],[-97.29583,17.03778],[-97.2875,17.03778],[-97.2875,17.03611]]],[[[-97.2865,17.03778],[-97.2875,17.03778],[-97.2875,17.03878],[-97.2865,17.03878],[-97.2865,17.03778]]],[[[-97.4125,17.07611],[-97.43889,17.09722],[-97.4125,17.10056],[-97.4125,17.07611]]],[[[-97.975,18.06389],[-97.92333,18.27194],[-97.60944,18.14944],[-97.975,18.06389]]],[[[-98.07956,18.61389],[-98.08056,18.61389],[-98.08056,18.61489],[-98.07956,18.61489],[-98.07956,18.61389]]]]},properties:{variante:"050101_otomiSierra"}}},{ID_FAM:6,CLAVE_FAM:"06",NOM_FAM:"Maya",id:"maya",agrupaciones:["huasteco","maya","lacandon","chol","chontaldetabasco","tseltal","tsotsil","qanjobal","akateko","jakalteko","qatok","chuj","tojolabal","qeqchi","kiche","kaqchikel","teko","mam","awakateko","ixil"],path:"<path d=\"M63.48941035835027,50.504318328911886 63.15950933333333,50.49264355555555 63.47515733333333,50.39703466666666 63.53777777777778,49.94409955555556 63.87634488888889,49.68039822222222 63.82735644444445,49.41728711111111 63.67644444444444,49.285923555555556 63.715555555555554,49.16681244444444 63.846911999999996,49.32049066666667 64.17639822222222,49.419456000000004 64.17462044444444,49.30271288888889 63.92355555555555,49.160099555555554 64.06321066666668,49.078122666666665 64.00197688888889,48.985088 64.17442133333333,49.036046222222225 64.23940977777778,48.86439822222222 64.62715733333333,48.81284266666666 64.68049066666667,48.89185422222222 65.41811944015292,48.63972019262122 65.826368,48.89975466666667 65.89451499023315,48.77999016001171 66.24592355555556,48.91950933333333 65.9020231111111,49.16918755555556 66.22439822222222,49.10834488888889 65.79555555555557,49.71062044444445 65.68750008888888,50.07609386666666 65.83965045724165,50.061759355615315 65.65625031111111,50.326629688888886 65.79360410327779,50.23588564455147 65.53876622222222,51.00839822222222 65.35937493333333,50.681243022222226 65.08167822222222,50.84721066666667 64.836544,51.19466666666667 64.66271288888889,51.17333333333334 64.43683942283768,51.38446126278971 63.31249991111111,51.334075733333336 63.31249991111111,51.79606328888888 62.992001911876436,51.73228385642036 63.613289092657084,52.253162201804564 63.642467555555555,52.44187733333334 62.82592805944113,52.58384323676286 62.604643555555555,52.77135644444445 62.36543288888889,53.577088 62.215111111111106,53.292842666666665 62.26212266666667,53.088988444444446 62.108444444444444,52.92404622222222 62.27496533333333,52.98311111111111 62.46628962213905,52.80621779020825 62.12266666666667,52.885333333333335 62.11832177777778,52.79684266666666 61.844145777777776,52.79328711111111 62.17531229646295,52.37876550848561 61.98222222222222,52.44543288888889 61.524544,52.295111111111105 61.353479111111106,52.12800000000001 61.09826844444444,52.283456 61.38903466666666,52.016000000000005 61.14528711111112,51.939754666666666 61.495241138308586,52.08426473136847 61.40484266666667,51.96898844444444 61.48740977777777,51.92632177777777 61.281976888888885,51.869824 61.84770133333333,51.88819911111111 61.94350933333333,51.56068977777778 62.170856849696754,51.46412567667504 62.08118755555556,51.26024533333334 62.35535644444444,51.219953777777775 62.50706488888889,51.40898844444445 63.48941035835027,50.504318328911886 M62.47744051258116,52.29131279148302 62.42500467690919,52.26715933096473 62.43160177777777,52.32671288888889 62.47744051258116,52.29131279148302 M62.43160177777777,52.32671288888889 62.455310222222224,52.40118755555556 62.47387733333334,52.365824 62.43160177777777,52.32671288888889 M62.46574495084497,53.03590969165495 62.45333333333333,52.93274311111111 62.43160177777777,53.00404622222222 62.46574495084497,53.03590969165495 M63.25591998478606,51.182039308805756 63.09234488888888,51.168590222222214 63.19131022222222,51.09886577777778 63.123555555555555,51.070023111111105 63.17550933333333,51.01531022222222 63.32147911111111,51.029134222222226 63.323064888888894,50.79012266666666 63.39674311111111,50.76128711111111 63.49093326003655,50.51910287981501 62.588795141685125,51.35669888073851 62.624398222222226,51.39160177777778 62.747053882519616,51.35127253785757 62.74903466666667,51.28434488888889 62.76237551594187,51.346234777441474 62.81422222222222,51.329187555555556 62.87822222222222,51.090368000000005 63.18123377777777,51.245824000000006 63.225454870026866,51.2455562294315 63.25591998478606,51.182039308805756 M62.54921146760781,52.51548920914296 62.61240020165654,52.52371798978947 62.63072184536102,52.485519072827934 62.54921146760781,52.51548920914296 M62.468964356176436,52.43860322541633 62.37590044444445,52.37649066666666 62.42864355555555,52.33757866666667 62.33046755555556,52.295701333333334 62.35852088888889,52.397824 62.32849066666667,52.44937955555555 62.43773155555556,52.48888888888889 62.41481244444445,52.61412266666666 62.46832596171951,52.62921907254385 62.43911111111112,52.556046222222214 62.468964356176436,52.43860322541633 M62.54881464964694,52.53593231843505 62.55236596602948,52.5347750628032 62.546224704846935,52.53029274057769 62.54881464964694,52.53593231843505 M62.498247203972014,52.218239112600884 62.48076025994698,52.145839586106995 62.425088,52.11950933333333 62.39466666666667,52.15466666666667 62.498247203972014,52.218239112600884 M62.33971547147908,52.22787265936711 62.33580088888888,52.243356444444444 62.34153244444444,52.261731555555556 62.39459644908201,52.25315242288664 62.33971547147908,52.22787265936711 M62.20608317838673,52.41379392719065 62.203256888888895,52.40434488888889 62.17817599999999,52.39347911111111 62.20608317838673,52.41379392719065 M61.692531342371474,52.16201104260771 61.86362042445427,52.22943225638983 61.838620444444445,52.206023111111115 61.857187555555555,52.159800888888896 61.85521066666667,52.146965333333334 61.79259022222222,52.13491199999999 61.71022222222222,52.137088 61.78173155555556,52.114567111111114 61.78370133333333,52.086912 61.766553577884295,52.080538046721365 61.676316762967446,52.10474025403441 61.68355555555556,52.109823999999996 61.692531342371474,52.16201104260771 M61.734127463660684,52.068485009361275 61.71674311111111,52.06202311111111 61.81668977777778,52.014620444444446 61.80049066666667,51.953578666666665 61.85757866666666,51.949432888888886 61.84592355555556,51.90064355555556 61.82222222222222,51.890176000000004 61.64275031619512,51.93538563199556 61.64662044444445,52.02014577777778 61.682965333333335,52.04681244444445 61.68335644444445,52.07644444444445 61.734127463660684,52.068485009361275 M62.350413460795195,51.97699804056305 62.35023459955633,51.9739222599917 62.349458045152026,51.97369312030321 62.350413460795195,51.97699804056305 M62.34978673517557,51.96622057700178 62.34800294700509,51.9355457307752 62.31947378837164,51.91687883348413 62.332842666666664,51.93046755555555 62.347455999999994,51.95042133333333 62.34409955555556,51.955157333333325 62.347958636167284,51.96850644875681 62.34978673517557,51.96622057700178 M62.27239822222222,51.819456 62.274814515761136,51.80377143154596 62.22301155555555,51.7667128888889 62.20402875693308,51.760054628920685 62.215111111111106,51.80642133333333 62.23525688888889,51.812935111111116 62.25185422222222,51.82360177777778 62.28636253107119,51.838868792577856 62.27239822222222,51.819456 M62.89213118267301,51.15879118714045 62.894421333333334,51.15357866666667 62.89304020579008,51.15298036221493 62.89213118267301,51.15879118714045 M62.964878025585705,51.78883462756327 62.95189565836019,51.78649199848889 62.94715733333334,51.79259022222222 62.958357561394806,51.802429186774035 62.964878025585705,51.78883462756327 M62.46673819425489,52.06222020161542 62.47361379425826,52.07773956055181 62.478023111111106,52.08039822222223 62.51555555555555,52.13353244444445 62.500665259213214,52.138799161777264 62.51950933333333,52.18133333333333 62.51829700803848,52.10609226899104 62.50587733333333,52.10331022222222 62.49402311111111,52.093824 62.49224533333334,52.08395377777778 62.48118755555556,52.06676622222222 62.47111111111111,52.06262044444444 62.46673819425489,52.06222020161542 M62.74447185250737,51.885190968856854 62.718959195951456,51.88577494281435 62.73294180201817,51.895531529151896 62.74447185250737,51.885190968856854 M62.507650366997495,51.929040024504936 62.51572571999658,51.946509317265715 62.51531448063974,51.92098639281714 62.507650366997495,51.929040024504936 M62.29632465773028,52.28708066064247 62.27259022222222,52.281088 62.2627469304161,52.28673730296669 62.276544,52.288000000000004 62.28780088888889,52.28642133333334 62.29632465773028,52.28708066064247 M62.178313131833484,52.28085097333175 62.1659184289537,52.272488290022295 62.17040884272748,52.280491777917945 62.178313131833484,52.28085097333175 M62.13274311111112,52.27496533333333 62.09977678351432,52.2680287415542 62.09481244444444,52.267854222222226 62.07921066666667,52.26370133333333 62.03881249621229,52.298470338651654 62.071900444444445,52.31150933333334 62.138752634197395,52.28827972829032 62.13274311111112,52.27496533333333 M62.29522271561394,51.851185973942876 62.294321777777775,51.854421333333335 62.29056711111111,51.86014577777778 62.29135644444444,51.86173155555556 62.29056711111111,51.86587733333334 62.28484266666666,51.88167822222222 62.29775686405613,51.8948047864132 62.30262044444445,51.88839822222223 62.301824,51.88226844444444 62.297678222222224,51.87199999999999 62.303800888888894,51.86311111111112 62.29522271561394,51.851185973942876 M61.66537966644915,52.09705921888616 61.636145777777784,52.02725688888889 61.59260747685544,52.00548493925702 61.59249066666667,52.045233777777774 61.62153244444445,52.06755555555556 61.62646755555556,52.069731555555556 61.66537966644915,52.09705921888616 M62.370693955319815,53.20163652689674 62.319011555555555,53.18518755555555 62.29238220558536,53.17512521184682 62.32335644444444,53.20493511111111 62.35792355555556,53.20652088888889 62.370693955319815,53.20163652689674 M57.41728711111111,48.373333333333335 57.451655111111116,48.074076444444444 57.634766222222225,48.25125688888889 57.80740977777778,48.11397688888889 58.04424533333333,48.203456 57.92553244444444,48.37846755555555 57.96147911111111,48.53728711111111 57.65668977777777,48.808490666666664 57.56937955555556,48.80790044444445 57.41728711111111,48.373333333333335 M57.88424533333333,48.658567111111104 58.16039822222222,48.579157333333335 58.24078933333333,48.89737955555555 58.17422222222223,48.962368 57.88424533333333,48.658567111111104 M58.203854222222226,49.142911999999995 58.292743111111115,48.718812444444445 58.33382400000001,48.80039822222223 58.519900444444445,48.695509333333334 58.63585422222222,48.76464355555555 58.36760177777778,48.95347911111111 58.38044444444444,49.13481244444445 58.203854222222226,49.142911999999995 M61.78607644444444,51.10143288888889 61.811754666666666,50.98943288888889 61.93856711111111,51.153777777777776 61.78607644444444,51.10143288888889 M61.78943288888889,51.26478933333333 61.93718755555555,51.165432888888894 61.96147911111111,50.985088 62.08,51.22725688888889 61.78943288888889,51.26478933333333 M62.07367822222223,51.064490666666664 61.88602311111111,50.912 62.216490666666665,50.78775466666667 62.03180088888889,50.89777777777778 62.317034666666665,50.92859022222222 62.28937955555556,51.062912 62.19002311111111,51.14587733333333 62.07367822222223,51.064490666666664Z\"/>",geojson:{type:"Feature",geometry:{type:"MultiPolygon",coordinates:[[[[-90.71801668356993,18.97830234996766],[-91.18194,18.99472],[-90.73806,19.12917],[-90.65,19.76611],[-90.17389,20.13694],[-90.24278,20.50694],[-90.455,20.69167],[-90.4,20.85917],[-90.21528,20.64306],[-89.75194,20.50389],[-89.75444,20.66806],[-90.1075,20.86861],[-89.91111,20.98389],[-89.99722,21.11472],[-89.75472,21.04306],[-89.66333,21.28444],[-89.11806,21.35694],[-89.04306,21.24583],[-88.00576953728495,21.600393479126403],[-87.43167,21.23472],[-87.33583829498463,21.403138837483535],[-86.84167,21.20694],[-87.32528,20.85583],[-86.87194,20.94139],[-87.475,20.09444],[-87.626953,19.580493],[-87.41299154450394,19.60065090616597],[-87.670898,19.228177],[-87.47774422976562,19.355785812349488],[-87.83611,18.26944],[-88.088379,18.729502],[-88.47889,18.49611],[-88.82361,18.0075],[-89.06806,18.0375],[-89.38569456163452,17.740601349201963],[-90.966797,17.811456],[-90.966797,17.161786],[-91.41749731142376,17.251475826908873],[-90.54381221345098,16.51899065371233],[-90.50278,16.25361],[-91.65103866641091,16.053970448302223],[-91.96222,15.79028],[-92.29861,14.65722],[-92.51,15.05694],[-92.44389,15.34361],[-92.66,15.57556],[-92.42583,15.4925],[-92.15678021886696,15.741256232519639],[-92.64,15.63],[-92.64611,15.75444],[-93.03167,15.75944],[-92.56596708309898,16.34236100369212],[-92.8375,16.24861],[-93.48111,16.46],[-93.72167,16.695],[-94.08056,16.47639],[-93.67167,16.8525],[-94.01444,16.95972],[-93.52231714925355,16.756502721513083],[-93.64944,16.91861],[-93.53333,16.97861],[-93.82222,17.05806],[-93.02667,17.03222],[-92.89194,17.49278],[-92.57223255511394,17.62857326717572],[-92.69833,17.91528],[-92.31278,17.97194],[-92.09944,17.70611],[-90.71801668356993,18.97830234996766]],[[-92.14109927918274,16.465341386977006],[-92.21483717309646,16.49930719083084],[-92.20556,16.41556],[-92.14109927918274,16.465341386977006]],[[-92.20556,16.41556],[-92.17222,16.31083],[-92.14611,16.36056],[-92.20556,16.41556]],[[-92.15754616287425,15.418251996110227],[-92.175,15.56333],[-92.20556,15.46306],[-92.15754616287425,15.418251996110227]],[[-91.0463625213946,18.025257221991907],[-91.27639,18.04417],[-91.13722,18.14222],[-91.2325,18.18278],[-91.15944,18.25972],[-90.95417,18.24028],[-90.95194,18.57639],[-90.84833,18.61694],[-90.7158751030736,18.957511575260146],[-91.9845068320053,17.77964219896147],[-91.93444,17.73056],[-91.76195547770679,17.787272993637803],[-91.75917,17.88139],[-91.74040943070675,17.79435734422293],[-91.6675,17.81833],[-91.5775,18.15417],[-91.15139,17.93556],[-91.08920408902472,17.935936552361955],[-91.0463625213946,18.025257221991907]],[[-92.04017137367651,16.15009329964271],[-91.95131221642049,16.13852157685856],[-91.92554740496107,16.19223880383573],[-92.04017137367651,16.15009329964271]],[[-92.15301887412689,16.258214214258295],[-92.28389,16.34556],[-92.20972,16.40028],[-92.34778,16.45917],[-92.30833,16.31556],[-92.35056,16.24306],[-92.19694,16.1875],[-92.22917,16.01139],[-92.15391661633194,15.990160679235215],[-92.195,16.09306],[-92.15301887412689,16.258214214258295]],[[-92.04072939893399,16.121345177200705],[-92.03573536027105,16.122972567933004],[-92.044371508809,16.12927583356261],[-92.04072939893399,16.121345177200705]],[[-92.11183986941435,16.56810124790501],[-92.13643088444955,16.669913082037045],[-92.21472,16.70694],[-92.2575,16.6575],[-92.11183986941435,16.56810124790501]],[[-92.33477511823254,16.554554072764997],[-92.34028,16.53278],[-92.33222,16.50694],[-92.25759874347843,16.51900440531565],[-92.33477511823254,16.554554072764997]],[[-92.52269553039366,16.293102289888132],[-92.52667,16.30639],[-92.56194,16.32167],[-92.52269553039366,16.293102289888132]],[[-93.24487779979012,16.647171971332916],[-93.00428377811119,16.552360889451805],[-93.03944,16.58528],[-93.01333,16.65028],[-93.01611,16.66833],[-93.10417,16.68528],[-93.22,16.68222],[-93.11944,16.71389],[-93.11667,16.75278],[-93.14078403110021,16.761743371798083],[-93.26767955207703,16.727709017764113],[-93.2575,16.72056],[-93.24487779979012,16.647171971332916]],[[-93.18638325422717,16.778692955585715],[-93.21083,16.78778],[-93.07028,16.85444],[-93.09306,16.94028],[-93.01278,16.94611],[-93.02917,17.01472],[-93.0625,17.02944],[-93.31488236785061,16.965863955006245],[-93.30944,16.84667],[-93.25833,16.80917],[-93.25778,16.7675],[-93.18638325422717,16.778692955585715]],[[-92.31973107075676,16.9073465054582],[-92.31998259437391,16.911671821886667],[-92.32107462400496,16.91199404957361],[-92.31973107075676,16.9073465054582]],[[-92.32061240365935,16.92250231359125],[-92.32312085577409,16.965638816097364],[-92.36323998510238,16.991889140412944],[-92.34444,16.97278],[-92.32389,16.94472],[-92.32861,16.93806],[-92.32318316788975,16.919287806435733],[-92.32061240365935,16.92250231359125]],[[-92.42944,17.12889],[-92.4260420872109,17.150946424388493],[-92.49889,17.20306],[-92.52558456056286,17.212423178080286],[-92.51,17.14722],[-92.48167,17.13806],[-92.45833,17.12306],[-92.40980269068113,17.101590760437393],[-92.42944,17.12889]],[[-91.55794052436607,18.057949893083748],[-91.55472,18.06528],[-91.5566622106077,18.066121365635254],[-91.55794052436607,18.057949893083748]],[[-91.4556402765201,17.171951304989147],[-91.47389673043098,17.175245627124998],[-91.48056,17.16667],[-91.46480967928855,17.15283395609901],[-91.4556402765201,17.171951304989147]],[[-92.15614941432906,16.787502841478318],[-92.14648060182432,16.76567874297401],[-92.14028,16.76194],[-92.0875,16.68722],[-92.10843947923142,16.679813678750715],[-92.08194,16.62],[-92.08364483244588,16.725807746731345],[-92.10111,16.72972],[-92.11778,16.74306],[-92.12028,16.75694],[-92.13583,16.78111],[-92.15,16.78694],[-92.15614941432906,16.787502841478318]],[[-91.76558645741152,17.036450200045053],[-91.80146363069326,17.03562898666732],[-91.78180059091196,17.02190878713014],[-91.76558645741152,17.036450200045053]],[[-92.09861667140977,16.97478746553993],[-92.08726070625481,16.950221272595094],[-92.08783901160037,16.986112885100894],[-92.09861667140977,16.97478746553993]],[[-92.39579345006679,16.471292820971527],[-92.42917,16.47972],[-92.44301212910236,16.47177566770308],[-92.42361,16.47],[-92.40778,16.47222],[-92.39579345006679,16.471292820971527]],[[-92.56174715835917,16.480053318752223],[-92.57917720928386,16.49181334215615],[-92.57286256491447,16.480558437302886],[-92.56174715835917,16.480053318752223]],[[-92.62583,16.48833],[-92.67218889818298,16.498084582189406],[-92.67917,16.49833],[-92.70111,16.50417],[-92.75791992720147,16.45527608627112],[-92.71139,16.43694],[-92.61737910815991,16.469606632091732],[-92.62583,16.48833]],[[-92.3973430561679,17.084269724142832],[-92.39861,17.07972],[-92.40389,17.07167],[-92.40278,17.06944],[-92.40389,17.06361],[-92.41194,17.04139],[-92.39377940992107,17.02293076910643],[-92.38694,17.03194],[-92.38806,17.04056],[-92.39389,17.055],[-92.38528,17.0675],[-92.3973430561679,17.084269724142832]],[[-93.28305984405588,16.73851047344134],[-93.32417,16.83667],[-93.38539573567203,16.867286804169808],[-93.38556,16.81139],[-93.34472,16.78],[-93.33778,16.77694],[-93.28305984405588,16.73851047344134]],[[-92.29121162533151,15.18519863405146],[-92.36389,15.20833],[-92.40133752339558,15.222480170840413],[-92.35778,15.18056],[-92.30917,15.17833],[-92.29121162533151,15.18519863405146]]],[[[-99.25694,21.975],[-99.20861,22.39583],[-98.95111,22.14667],[-98.70833,22.33972],[-98.37528,22.21389],[-98.54222,21.96778],[-98.49167,21.74444],[-98.92028,21.36306],[-99.04306,21.36389],[-99.25694,21.975]]],[[[-98.60028,21.57389],[-98.21194,21.68556],[-98.09889,21.23806],[-98.1925,21.14667],[-98.60028,21.57389]]],[[[-98.15083,20.89278],[-98.02583,21.48917],[-97.96806,21.37444],[-97.70639,21.52194],[-97.54333,21.42472],[-97.92056,21.15917],[-97.9025,20.90417],[-98.15083,20.89278]]],[[[-93.11333,18.13861],[-93.07722,18.29611],[-92.89889,18.065],[-93.11333,18.13861]]],[[[-93.10861,17.90889],[-92.90083,18.04861],[-92.86667,18.30222],[-92.7,17.96167],[-93.10861,17.90889]]],[[[-92.70889,18.19056],[-92.97278,18.405],[-92.50806,18.57972],[-92.76778,18.425],[-92.36667,18.38167],[-92.40556,18.19278],[-92.54528,18.07611],[-92.70889,18.19056]]]]},properties:{variante:"060101_huastecoOccidente"}}},{ID_FAM:7,CLAVE_FAM:"07",NOM_FAM:"Totonaco-tepehua",id:"totonacotepehua",agrupaciones:["totonaco","tepehua"],path:"<path d=\"M59.044935111111116,50.049187555555555 59.04276622222223,49.73965511111112 59.22547911111111,49.956935111111115 59.174912,50.07012266666667 59.044935111111116,50.049187555555555 M58.37056711111111,49.648590222222225 58.26903466666667,49.59723377777778 58.240590222222224,49.197632 58.504099555555555,49.210865777777784 58.46262044444445,49.351111111111116 58.54973155555555,49.39160177777778 58.68009955555556,48.99614577777778 58.76523377777778,49.00523377777778 59.0736336242238,49.5215451273583 58.51318755555556,49.84039822222222 58.37056711111111,49.648590222222225 M58.59125619390099,49.5446621601149 58.59086876400871,49.542087678911166 58.59002311111111,49.54311111111111 58.59125619390099,49.5446621601149 M58.58774994327932,49.52136303812931 58.587456,49.519409777777774 58.58561083403944,49.5185946991702 58.58774994327932,49.52136303812931 M58.576064485111985,49.506240243792035 58.574222222222225,49.50222222222222 58.59180088888889,49.47515733333333 58.59931022222223,49.44671288888889 58.598144660214196,49.428378655731585 58.564544000000005,49.47357866666667 58.53392355555555,49.467655111111114 58.53045648791885,49.47093445585597 58.563953777777776,49.490567111111105 58.576064485111985,49.506240243792035 M58.497912218909704,49.50171662936196 58.48296533333333,49.515854222222224 58.49842183046234,49.535729700742166 58.506076444444446,49.51525688888889 58.497912218909704,49.50171662936196 M58.48171830262429,49.580404479054174 58.476506591486526,49.58202050223978 58.48118755555556,49.581824 58.48171830262429,49.580404479054174 M58.47642098043514,49.582047048117 58.47012266666666,49.583999999999996 58.46775466666667,49.58222222222222 58.461824,49.58518755555555 58.44246755555555,49.58202311111111 58.41497294273588,49.60128627939197 58.43010992040325,49.60388460202679 58.43773155555556,49.593088 58.44108799999999,49.590712888888895 58.46656711111111,49.592099555555556 58.47642098043514,49.582047048117 M58.15328711111111,49.34953244444444 58.19496533333333,49.25925688888889 58.22340977777778,49.34696533333334 58.15328711111111,49.34953244444444Z\"/>",geojson:{type:"Feature",geometry:{type:"MultiPolygon",coordinates:[[[[-96.96806,19.61833],[-96.97111,20.05361],[-96.71417,19.74806],[-96.78528,19.58889],[-96.96806,19.61833]]],[[[-97.91639,20.18167],[-98.05917,20.25389],[-98.09917,20.81583],[-97.72861,20.79722],[-97.78694,20.6],[-97.66444,20.54306],[-97.48111,21.09917],[-97.36139,21.08639],[-96.92770271593528,20.36032716465239],[-97.71583,19.91194],[-97.91639,20.18167]],[[-97.60604597732673,20.32781883733841],[-97.60659080061275,20.331439201531165],[-97.60778,20.33],[-97.60604597732673,20.32781883733841]],[[-97.61097664226345,20.36058322763066],[-97.61139,20.36333],[-97.61398476463204,20.364476204291904],[-97.61097664226345,20.36058322763066]],[[-97.62740931781127,20.381849657167447],[-97.63,20.3875],[-97.60528,20.42556],[-97.59472,20.46556],[-97.59635907157379,20.491342515377458],[-97.64361,20.42778],[-97.68667,20.43611],[-97.69154556386412,20.431498421452552],[-97.64444,20.40389],[-97.62740931781127,20.381849657167447]],[[-97.73731094215823,20.38821098995975],[-97.75833,20.36833],[-97.73659430091233,20.34038010833133],[-97.72583,20.36917],[-97.73731094215823,20.38821098995975]],[[-97.7600836369346,20.27755620133008],[-97.76741260572207,20.275283668725308],[-97.76083,20.27556],[-97.7600836369346,20.27755620133008]],[[-97.76753299626309,20.275246338585468],[-97.77639,20.2725],[-97.77972,20.275],[-97.78806,20.27083],[-97.81528,20.27528],[-97.85394429927767,20.248191169605033],[-97.83265792443294,20.244537278399825],[-97.82194,20.25972],[-97.81722,20.26306],[-97.78139,20.26111],[-97.76753299626309,20.275246338585468]]],[[[-98.22194,20.60222],[-98.16333,20.72917],[-98.12333,20.60583],[-98.22194,20.60222]]]]},properties:{variante:"070101_totonacoSureste"}}},{ID_FAM:8,CLAVE_FAM:"08",NOM_FAM:"Tarasca",id:"tarasca",agrupaciones:["tarasco"],path:"<path d=\"M55.089777777777776,50.06143288888889 55.136398222222226,49.79911111111111 55.26814577777778,49.886812444444445 55.94153244444444,49.89688888888889 56.09323377777778,50.022321777777776 55.87950933333334,50.04226844444444 55.77975466666667,50.18331022222222 55.63377777777778,50.12444444444444 55.48721066666667,50.28167822222222 55.089777777777776,50.06143288888889Z\"/>",geojson:{type:"Feature",properties:{variante:"080101_purepecha"},geometry:{type:"Polygon",coordinates:[[[-102.53,19.60111],[-102.46444,19.97],[-102.27917,19.84667],[-101.33222,19.8325],[-101.11889,19.65611],[-101.41944,19.62806],[-101.55972,19.42972],[-101.765,19.5125],[-101.97111,19.29139],[-102.53,19.60111]]]}}},{ID_FAM:9,CLAVE_FAM:"09",NOM_FAM:"Mixe-zoque",id:"mixezoque",agrupaciones:["mixe","sayulteco","oluteco","texistepequeno","ayapaneco","popolucadelasierra","zoque"],path:"<path d=\"M59.66360177777778,51.747157333333334 59.74044444444445,51.69284266666667 59.75032177777777,51.77224533333334 59.66360177777778,51.747157333333334 M59.59506488888889,51.901233777777776 59.74814577777778,51.822620444444446 59.73629866666667,51.986176 59.59506488888889,51.901233777777776 M59.693114447532054,51.92705708164706 59.6793735835742,51.92422383444912 59.68,51.93343288888889 59.693114447532054,51.92705708164706 M59.76947911111112,51.985777777777784 59.777976888888894,51.76849066666667 60.15012266666667,51.65985422222222 60.089877333333334,51.60888888888889 60.26429866666666,51.49846755555556 60.34271288888888,51.544689777777776 60.198520888888886,51.65234488888889 60.612344888888884,51.83901155555556 60.44780088888889,51.91209955555556 60.502712888888894,51.990122666666664 60.280490666666665,51.985187555555555 60.28760177777777,52.44128711111111 60.21135644444444,52.40039822222223 60.14321066666667,52.59931022222223 58.98666666666667,52.52246755555555 59.76947911111112,51.985777777777784 M60.17746842661475,51.67137379518192 59.88918755555556,51.795356444444444 59.938368000000004,51.88997688888889 59.84039822222222,51.985187555555555 60.17746842661475,51.67137379518192 M59.771854222222224,51.906176 59.78173155555556,51.86153244444444 59.82182400000001,51.893731555555554 59.771854222222224,51.906176 M60.45826844444445,51.46113422222223 60.43674311111111,51.26518755555555 60.55604622222223,51.430912 60.45826844444445,51.46113422222223 M60.51773155555556,51.25135644444445 60.528000000000006,51.24444444444445 60.54360177777777,51.29086577777778 60.51773155555556,51.25135644444445 M60.565333333333335,51.33906488888889 60.552298666666665,51.23595377777778 60.616298666666665,51.373824 60.565333333333335,51.33906488888889 M61.800888888888885,51.11486577777778 61.78804622222222,51.11486577777778 61.78804622222222,51.04137955555555 61.800888888888885,51.04137955555555 61.800888888888885,51.11486577777778 M60.313287111111116,51.08721066666667 60.59456711111112,50.84226844444444 60.58093511111111,51.09432177777777 60.313287111111116,51.08721066666667 M61.309824,51.83249066666667 61.51545600000001,51.54034488888889 61.718122666666666,51.70528711111111 61.62274845253892,51.721573337956265 61.736689777777784,51.842368 61.626666666666665,51.88385422222222 61.51822222222223,51.778176 61.309824,51.83249066666667 M61.62646755555556,52.069731555555556 61.32503466666667,51.86864355555556 61.52414577777778,51.881088 61.82202311111111,52.142812444444445 61.62646755555556,52.069731555555556 M61.87101155555556,51.741432888888895 61.88167822222222,51.819456 61.71515733333334,51.77757866666666 61.753088000000005,51.51684266666667 61.58696533333333,51.46607644444444 61.75229866666666,51.26735644444444 61.95377777777778,51.629632 61.87101155555556,51.741432888888895 M61.963256888888885,51.867256888888896 61.93619911111111,51.867456 62.03219911111111,51.83111111111111 61.963256888888885,51.867256888888896 M60.57323377777778,52.12088888888889 60.52701155555556,51.99111111111111 60.669632,51.977678222222224 60.595555555555556,51.794176 60.695509333333334,51.87081244444445 60.675555555555555,52.12147911111111 61.21185422222223,51.83802311111111 61.01925688888889,52.158023111111106 60.57323377777778,52.12088888888889Z\"/>",geojson:{type:"Feature",geometry:{type:"MultiPolygon",coordinates:[[[[-96.09806,17.23056],[-95.99,17.30694],[-95.97611,17.19528],[-96.09806,17.23056]]],[[[-96.19444,17.01389],[-95.97917,17.12444],[-95.99583,16.89444],[-96.19444,17.01389]],[[-96.05655780815805,16.97757597893383],[-96.07588089809879,16.98156023280591],[-96.075,16.96861],[-96.05655780815805,16.97757597893383]]],[[[-95.94917,16.895],[-95.93722,17.20056],[-95.41389,17.35333],[-95.49861,17.425],[-95.25333,17.58028],[-95.14306,17.51528],[-95.34583,17.36389],[-94.76389,17.10139],[-94.99528,16.99861],[-94.91806,16.88889],[-95.23056,16.89583],[-95.22056,16.25444],[-95.32778,16.31194],[-95.42361,16.03222],[-97.05,16.14028],[-95.94917,16.895]],[[-95.375435025073,17.337130600525423],[-95.78083,17.16278],[-95.71167,17.02972],[-95.84944,16.89583],[-95.375435025073,17.337130600525423]]],[[[-95.94583,17.00694],[-95.93194,17.06972],[-95.87556,17.02444],[-95.94583,17.00694]]],[[[-94.98056,17.63278],[-95.01083,17.90833],[-94.84306,17.67528],[-94.98056,17.63278]]],[[[-94.89694,17.92778],[-94.8825,17.9375],[-94.86056,17.87222],[-94.89694,17.92778]]],[[[-94.83,17.80444],[-94.84833,17.94944],[-94.75833,17.75556],[-94.83,17.80444]]],[[[-93.0925,18.11972],[-93.11056,18.11972],[-93.11056,18.22306],[-93.0925,18.22306],[-93.0925,18.11972]]],[[[-95.18444,18.15861],[-94.78889,18.50306],[-94.80806,18.14861],[-95.18444,18.15861]]],[[[-93.78306,17.11056],[-93.49389,17.52139],[-93.20889,17.28944],[-93.34300998861714,17.266537493499005],[-93.18278,17.09667],[-93.3375,17.03833],[-93.49,17.18694],[-93.78306,17.11056]]],[[[-93.33778,16.77694],[-93.76167,17.05972],[-93.48167,17.04222],[-93.06278,16.67417],[-93.33778,16.77694]]],[[[-92.99389,17.23861],[-92.97889,17.12889],[-93.21306,17.18778],[-93.15972,17.55444],[-93.39333,17.62583],[-93.16083,17.90528],[-92.8775,17.39583],[-92.99389,17.23861]]],[[[-92.86417,17.06167],[-92.90222,17.06139],[-92.76722,17.1125],[-92.86417,17.06167]]],[[[-94.81889,16.705],[-94.88389,16.8875],[-94.68333,16.90639],[-94.7875,17.16444],[-94.64694,17.05667],[-94.675,16.70417],[-93.92083,17.10278],[-94.19167,16.65278],[-94.81889,16.705]]]]},properties:{variante:"090101_mixeAltoNorte"}}},{ID_FAM:10,CLAVE_FAM:"10",NOM_FAM:"Chontal de Oaxaca",id:"chontaldeoaxaca",agrupaciones:["chontaldeoaxaca"],path:"<path d=\"M59.70409955555555,52.610766222222225 59.77125688888889,52.524046222222225 59.65787733333333,52.270222222222216 59.749923555555554,52.40355555555555 59.98557866666667,52.26903466666667 60.02133333333333,52.43298844444445 60.29826844444444,52.35160177777777 60.15407644444444,52.613532444444445 59.75426844444444,52.73619911111111 60.13601556585355,52.553890454724325 59.92829866666666,52.409287111111105 59.81234488888889,52.610367999999994 59.70409955555555,52.610766222222225 M59.801898577713,52.415994559733534 59.84296533333333,52.42370133333334 59.84922813364743,52.37877032618311 59.801898577713,52.415994559733534Z\"/>",geojson:{type:"Feature",geometry:{type:"Polygon",coordinates:[[[-96.04111,16.01611],[-95.94667,16.13806],[-96.10611,16.495],[-95.97667,16.3075],[-95.64528,16.49667],[-95.595,16.26611],[-95.20556,16.38056],[-95.40833,16.01222],[-95.97056,15.83972],[-95.43372811051844,16.096091548043912],[-95.72583,16.29944],[-95.88889,16.01667],[-96.04111,16.01611]],[[-95.9035801250911,16.290007650374726],[-95.84583,16.27917],[-95.83702293705831,16.342354228805004],[-95.9035801250911,16.290007650374726]]]},properties:{variante:"100101_chontalOaxacaAlto"}}},{ID_FAM:11,CLAVE_FAM:"11",NOM_FAM:"Huave",id:"huave",agrupaciones:["huave"],path:"<path d=\"M59.91369420473048,52.62670195817718 59.89819702502504,52.56329929151052 59.95367403702011,52.42580595817719 59.98859588815483,52.39559795817719 60.0451364945997,52.13603529151052 60.13224683338433,52.06847262484385 60.49871445103684,51.82019529151052 60.55866333701059,51.816035291510524 60.54860260476174,52.09929929151052 60.253364005497296,52.242701958177186 60.47636563566282,52.56152862484386 60.25601003777111,52.57040329151052 60.20861306793506,52.58166729151051 60.16776060718496,52.58819529151052 60.131041973575705,52.61070195817719 60.01970025262777,52.61840329151053 59.91369420473048,52.62670195817718 M60.73998024611885,52.553805958177186 60.54093045514625,52.45306995817718 60.661244176975906,52.32152862484385 60.68138540604066,52.33040329151053 60.87468082382329,52.24566729151052 61.046584984622555,52.252195291510525 61.19824379737147,52.32152862484385 61.94200039195211,52.79302683492647 61.688587598859726,52.76435656738694 61.413921395483584,52.66106995817719 61.07346714685931,52.586403291510514 61.010082556419086,52.59352862484385 60.95385878500508,52.53486195817719 60.73998024611885,52.553805958177186Z\"/>",geojson:{type:"Feature",properties:{variante:"110101_huaveOeste"},geometry:{type:"MultiPolygon",coordinates:[[[[-95.74636752459776,15.993700371313336],[-95.76816043355853,16.082860371313338],[-95.69014588544047,16.27621037131333],[-95.64103703228227,16.31869037131333],[-95.56152680446917,16.683700371313332],[-95.43902789055329,16.778710371313334],[-94.92368280322944,17.12785037131333],[-94.83937968232885,17.13370037131333],[-94.8535275870538,16.735360371313327],[-95.26870686726943,16.53370037131333],[-94.95511082484916,16.08535037131333],[-95.26498588438437,16.07287037131333],[-95.33163787321632,16.05703037131334],[-95.38908664614615,16.047850371313327],[-95.44072222465917,16.016200371313335],[-95.5972965197422,16.005370371313326],[-95.74636752459776,15.993700371313336]]],[[[-94.58440277889537,16.09621037131333],[-94.86431654745058,16.237870371313328],[-94.69512537612763,16.422850371313334],[-94.66680177275532,16.410370371313327],[-94.3949800914985,16.52953037131333],[-94.15323986537453,16.520350371313327],[-93.93996965994637,16.422850371313334],[-92.89406194881735,15.759806013384651],[-93.25042368910351,15.800123577112117],[-93.63667303760121,15.945370371313329],[-94.1154368247291,16.05037037131333],[-94.20457140503567,16.040350371313338],[-94.2836360835866,16.122850371313334],[-94.58440277889537,16.09621037131333]]]]}}}];

/* src/componentes/general/Principal/Principal.svelte generated by Svelte v3.12.1 */

const file$3 = "src/componentes/general/Principal/Principal.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.fam = list[i];
	return child_ctx;
}

// (58:12) {#each familias as fam}
function create_each_block(ctx) {
	var current;

	var mapacapa = new MapaCapa({
		props: {
		polygon: ctx.fam.geojson,
		id: ctx.fam.id
	},
		$$inline: true
	});
	mapacapa.$on("layerclick", ctx.handleLayerClick);

	const block = {
		c: function create() {
			mapacapa.$$.fragment.c();
		},

		l: function claim(nodes) {
			mapacapa.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(mapacapa, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			transition_in(mapacapa.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(mapacapa.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(mapacapa, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(58:12) {#each familias as fam}", ctx });
	return block;
}

// (56:8) <Mapa lat={19} lon={-99} zoom={8}>
function create_default_slot(ctx) {
	var t, current;

	let each_value = familias;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	var mapamarcador = new MapaMarcador({
		props: {
		lat: 19.8981,
		lon: -99.4169,
		label: "Svelte Barbershop & Essentials"
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			mapamarcador.$$.fragment.c();
		},

		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t = claim_space(nodes);
			mapamarcador.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t, anchor);
			mount_component(mapamarcador, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.familias) {
				each_value = familias;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t.parentNode, t);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(mapamarcador.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(mapamarcador.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach_dev(t);
			}

			destroy_component(mapamarcador, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot.name, type: "slot", source: "(56:8) <Mapa lat={19} lon={-99} zoom={8}>", ctx });
	return block;
}

function create_fragment$5(ctx) {
	var div3, div0, t0, div1, t1, div2, current;

	var mapa = new Mapa({
		props: {
		lat: 19,
		lon: -99,
		zoom: 8,
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var herramientas = new Herramientas({ $$inline: true });

	var lateral = new Lateral({ $$inline: true });

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			mapa.$$.fragment.c();
			t0 = space();
			div1 = element("div");
			herramientas.$$.fragment.c();
			t1 = space();
			div2 = element("div");
			lateral.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			div0 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			mapa.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div3_nodes);

			div1 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			herramientas.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);

			div2 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			lateral.$$.fragment.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div0, "class", "Mapa svelte-6tpwp2");
			add_location(div0, file$3, 54, 4, 1004);
			attr_dev(div1, "class", "Herramientas svelte-6tpwp2");
			add_location(div1, file$3, 68, 4, 1711);
			attr_dev(div2, "class", "Lateral svelte-6tpwp2");
			add_location(div2, file$3, 71, 4, 1777);
			attr_dev(div3, "class", "Principal svelte-6tpwp2");
			add_location(div3, file$3, 53, 0, 976);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			mount_component(mapa, div0, null);
			append_dev(div3, t0);
			append_dev(div3, div1);
			mount_component(herramientas, div1, null);
			append_dev(div3, t1);
			append_dev(div3, div2);
			mount_component(lateral, div2, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var mapa_changes = {};
			if (changed.$$scope) mapa_changes.$$scope = { changed, ctx };
			mapa.$set(mapa_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(mapa.$$.fragment, local);

			transition_in(herramientas.$$.fragment, local);

			transition_in(lateral.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(mapa.$$.fragment, local);
			transition_out(herramientas.$$.fragment, local);
			transition_out(lateral.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div3);
			}

			destroy_component(mapa);

			destroy_component(herramientas);

			destroy_component(lateral);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$5.name, type: "component", source: "", ctx });
	return block;
}

function instance$3($$self) {
	
	
	console.log(familias);

	const handleLayerClick = (famId) => {
		console.log(famId);
	};

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {};

	return { handleLayerClick };
}

class Principal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$5, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Principal", options, id: create_fragment$5.name });
	}
}

/* src/routes/index.svelte generated by Svelte v3.12.1 */

function create_fragment$6(ctx) {
	var t, current;

	var principal = new Principal({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			principal.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_space(nodes);
			principal.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "INALI - Mapa Interactivo de lenguas indígenas";
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(principal, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			transition_in(principal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(principal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(principal, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$6.name, type: "component", source: "", ctx });
	return block;
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$6, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$6.name });
	}
}

export default Index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
