import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, t as text, a as space, c as claim_element, b as children, f as claim_text, g as detach_dev, h as claim_space, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, n as noop, o as mount_component, p as transition_in, q as transition_out, r as destroy_component } from './index.d5b5ff94.js';

/* src/componentes/general/Lateral/Lateral.svelte generated by Svelte v3.12.1 */

const file = "src/componentes/general/Lateral/Lateral.svelte";

function create_fragment(ctx) {
	var aside, h2, t0, t1, ul2, li2, details2, summary0, t2, t3, ul1, h30, t4, t5, li1, details1, summary1, t6, t7, ul0, h31, t8, t9, li0, details0, summary2, t10;

	const block = {
		c: function create() {
			aside = element("aside");
			h2 = element("h2");
			t0 = text("Familia linguistica");
			t1 = space();
			ul2 = element("ul");
			li2 = element("li");
			details2 = element("details");
			summary0 = element("summary");
			t2 = text("Nombre de familia");
			t3 = space();
			ul1 = element("ul");
			h30 = element("h3");
			t4 = text("Agrupaciones linguisticas");
			t5 = space();
			li1 = element("li");
			details1 = element("details");
			summary1 = element("summary");
			t6 = text("Nombre de agrupacion linguistica");
			t7 = space();
			ul0 = element("ul");
			h31 = element("h3");
			t8 = text("Variantes");
			t9 = space();
			li0 = element("li");
			details0 = element("details");
			summary2 = element("summary");
			t10 = text("Nombre de variante");
			this.h();
		},

		l: function claim(nodes) {
			aside = claim_element(nodes, "ASIDE", { class: true }, false);
			var aside_nodes = children(aside);

			h2 = claim_element(aside_nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Familia linguistica");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(aside_nodes);

			ul2 = claim_element(aside_nodes, "UL", {}, false);
			var ul2_nodes = children(ul2);

			li2 = claim_element(ul2_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			details2 = claim_element(li2_nodes, "DETAILS", { class: true }, false);
			var details2_nodes = children(details2);

			summary0 = claim_element(details2_nodes, "SUMMARY", {}, false);
			var summary0_nodes = children(summary0);

			t2 = claim_text(summary0_nodes, "Nombre de familia");
			summary0_nodes.forEach(detach_dev);
			t3 = claim_space(details2_nodes);

			ul1 = claim_element(details2_nodes, "UL", {}, false);
			var ul1_nodes = children(ul1);

			h30 = claim_element(ul1_nodes, "H3", { class: true }, false);
			var h30_nodes = children(h30);

			t4 = claim_text(h30_nodes, "Agrupaciones linguisticas");
			h30_nodes.forEach(detach_dev);
			t5 = claim_space(ul1_nodes);

			li1 = claim_element(ul1_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			details1 = claim_element(li1_nodes, "DETAILS", { class: true }, false);
			var details1_nodes = children(details1);

			summary1 = claim_element(details1_nodes, "SUMMARY", {}, false);
			var summary1_nodes = children(summary1);

			t6 = claim_text(summary1_nodes, "Nombre de agrupacion linguistica");
			summary1_nodes.forEach(detach_dev);
			t7 = claim_space(details1_nodes);

			ul0 = claim_element(details1_nodes, "UL", {}, false);
			var ul0_nodes = children(ul0);

			h31 = claim_element(ul0_nodes, "H3", { class: true }, false);
			var h31_nodes = children(h31);

			t8 = claim_text(h31_nodes, "Variantes");
			h31_nodes.forEach(detach_dev);
			t9 = claim_space(ul0_nodes);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			details0 = claim_element(li0_nodes, "DETAILS", { class: true }, false);
			var details0_nodes = children(details0);

			summary2 = claim_element(details0_nodes, "SUMMARY", {}, false);
			var summary2_nodes = children(summary2);

			t10 = claim_text(summary2_nodes, "Nombre de variante");
			summary2_nodes.forEach(detach_dev);
			details0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			details1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			ul1_nodes.forEach(detach_dev);
			details2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul2_nodes.forEach(detach_dev);
			aside_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(h2, file, 12, 0, 149);
			add_location(summary0, file, 16, 12, 222);
			attr_dev(h30, "class", "Titulo svelte-1e8rsmb");
			add_location(h30, file, 21, 16, 323);
			add_location(summary1, file, 27, 24, 523);
			attr_dev(h31, "class", "Titulo svelte-1e8rsmb");
			add_location(h31, file, 32, 28, 711);
			add_location(summary2, file, 38, 36, 919);
			attr_dev(details0, "class", "svelte-1e8rsmb");
			add_location(details0, file, 37, 31, 873);
			add_location(li0, file, 36, 28, 837);
			add_location(ul0, file, 30, 24, 653);
			attr_dev(details1, "class", "svelte-1e8rsmb");
			add_location(details1, file, 26, 20, 465);
			add_location(li1, file, 25, 16, 440);
			add_location(ul1, file, 19, 12, 301);
			attr_dev(details2, "class", "svelte-1e8rsmb");
			add_location(details2, file, 15, 8, 200);
			add_location(li2, file, 14, 4, 187);
			add_location(ul2, file, 13, 0, 178);
			attr_dev(aside, "class", "svelte-1e8rsmb");
			add_location(aside, file, 11, 0, 141);
		},

		m: function mount(target, anchor) {
			insert_dev(target, aside, anchor);
			append_dev(aside, h2);
			append_dev(h2, t0);
			append_dev(aside, t1);
			append_dev(aside, ul2);
			append_dev(ul2, li2);
			append_dev(li2, details2);
			append_dev(details2, summary0);
			append_dev(summary0, t2);
			append_dev(details2, t3);
			append_dev(details2, ul1);
			append_dev(ul1, h30);
			append_dev(h30, t4);
			append_dev(ul1, t5);
			append_dev(ul1, li1);
			append_dev(li1, details1);
			append_dev(details1, summary1);
			append_dev(summary1, t6);
			append_dev(details1, t7);
			append_dev(details1, ul0);
			append_dev(ul0, h31);
			append_dev(h31, t8);
			append_dev(ul0, t9);
			append_dev(ul0, li0);
			append_dev(li0, details0);
			append_dev(details0, summary2);
			append_dev(summary2, t10);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(aside);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

class Lateral extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Lateral", options, id: create_fragment.name });
	}
}

/* src/componentes/general/Herramientas/Herramientas.svelte generated by Svelte v3.12.1 */

const file$1 = "src/componentes/general/Herramientas/Herramientas.svelte";

function create_fragment$1(ctx) {
	var header, button0, i0, t0, t1, button1, i1, t2;

	const block = {
		c: function create() {
			header = element("header");
			button0 = element("button");
			i0 = element("i");
			t0 = text("Peligro Boton");
			t1 = space();
			button1 = element("button");
			i1 = element("i");
			t2 = text("Voluta Boton");
			this.h();
		},

		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", {}, false);
			var header_nodes = children(header);

			button0 = claim_element(header_nodes, "BUTTON", { class: true }, false);
			var button0_nodes = children(button0);

			i0 = claim_element(button0_nodes, "I", {}, false);
			var i0_nodes = children(i0);

			t0 = claim_text(i0_nodes, "Peligro Boton");
			i0_nodes.forEach(detach_dev);
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(header_nodes);

			button1 = claim_element(header_nodes, "BUTTON", { class: true }, false);
			var button1_nodes = children(button1);

			i1 = claim_element(button1_nodes, "I", {}, false);
			var i1_nodes = children(i1);

			t2 = claim_text(i1_nodes, "Voluta Boton");
			i1_nodes.forEach(detach_dev);
			button1_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(i0, file$1, 9, 8, 122);
			attr_dev(button0, "class", "svelte-87xqcg");
			add_location(button0, file$1, 8, 4, 105);
			add_location(i1, file$1, 12, 8, 178);
			attr_dev(button1, "class", "svelte-87xqcg");
			add_location(button1, file$1, 11, 4, 161);
			add_location(header, file$1, 7, 0, 92);
		},

		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, button0);
			append_dev(button0, i0);
			append_dev(i0, t0);
			append_dev(header, t1);
			append_dev(header, button1);
			append_dev(button1, i1);
			append_dev(i1, t2);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(header);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

class Herramientas extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$1, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Herramientas", options, id: create_fragment$1.name });
	}
}

/* src/componentes/general/Principal/Principal.svelte generated by Svelte v3.12.1 */

const file$2 = "src/componentes/general/Principal/Principal.svelte";

function create_fragment$2(ctx) {
	var div4, div1, div0, t0, t1, div2, t2, div3, current;

	var herramientas = new Herramientas({ $$inline: true });

	var lateral = new Lateral({ $$inline: true });

	const block = {
		c: function create() {
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text("MAPA");
			t1 = space();
			div2 = element("div");
			herramientas.$$.fragment.c();
			t2 = space();
			div3 = element("div");
			lateral.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			div1 = claim_element(div4_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			t0 = claim_text(div0_nodes, "MAPA");
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div4_nodes);

			div2 = claim_element(div4_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			herramientas.$$.fragment.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div4_nodes);

			div3 = claim_element(div4_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			lateral.$$.fragment.l(div3_nodes);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div0, "class", "temporal");
			add_location(div0, file$2, 44, 8, 730);
			attr_dev(div1, "class", "Mapa svelte-6tpwp2");
			add_location(div1, file$2, 43, 4, 703);
			attr_dev(div2, "class", "Herramientas svelte-6tpwp2");
			add_location(div2, file$2, 48, 4, 800);
			attr_dev(div3, "class", "Lateral svelte-6tpwp2");
			add_location(div3, file$2, 51, 4, 866);
			attr_dev(div4, "class", "Principal svelte-6tpwp2");
			add_location(div4, file$2, 42, 0, 675);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div1);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div4, t1);
			append_dev(div4, div2);
			mount_component(herramientas, div2, null);
			append_dev(div4, t2);
			append_dev(div4, div3);
			mount_component(lateral, div3, null);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			transition_in(herramientas.$$.fragment, local);

			transition_in(lateral.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(herramientas.$$.fragment, local);
			transition_out(lateral.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div4);
			}

			destroy_component(herramientas);

			destroy_component(lateral);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$2.name, type: "component", source: "", ctx });
	return block;
}

class Principal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$2, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Principal", options, id: create_fragment$2.name });
	}
}

/* src/routes/index.svelte generated by Svelte v3.12.1 */

function create_fragment$3(ctx) {
	var t, current;

	var principal = new Principal({ $$inline: true });

	const block = {
		c: function create() {
			t = space();
			principal.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_space(nodes);
			principal.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "INALI - Mapa Interactivo de lenguas indígenas";
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(principal, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			transition_in(principal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(principal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(principal, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$3.name, type: "component", source: "", ctx });
	return block;
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$3, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$3.name });
	}
}

export default Index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNjY3ZTU3NDUuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
